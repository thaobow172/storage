{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "bow",
    "description": ".NET web service hosted in Azure for use by the FlexTime application.  Please note:  The token should be specified in the 'api_key' input field.",
    "termsOfService": "XXXXXXXX"
  },
  "host": "time-aze-flextime-rem-n2a.paychex.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/api/CalendarAuthorization": {
      "get": {
        "tags": [
          "CalendarAuthorization"
        ],
        "summary": "This method is called when navigating to the redirect url.",
        "operationId": "CalendarAuthorization_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "oAuth authorization.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Returns the health state of the service.",
        "description": "Returns a string containing the service status, version, and a timestamp.  The version is comprised of the branch and build number separated with a period.",
        "operationId": "Health_GetHealth",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health/Version": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Returns the version of the service from web.config file.",
        "description": "Returns a string containing the version number which is comprised of the branch and build number separated with a period.",
        "operationId": "Health_GetVersion",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health/Error": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Creates an error.",
        "description": "Logs an error containing the string \"Test error logged to log4net.\"",
        "operationId": "Health_GetError",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health/Exception": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Creates an exception.",
        "description": "Throws and catches an exception, returning the exception message with http status code 400 (BadRequest).",
        "operationId": "Health_GetException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health/ThrowCustomException": {
      "post": {
        "tags": [
          "Health"
        ],
        "summary": "Creates an exception.",
        "description": "Throws and catches an exception of the type which is provided as an argument, returning the exception message with http status code 400 (BadRequest).",
        "operationId": "Health_ThrowCustomException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "exceptionTypeName",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/health/Slow": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Executes a slow transaction.",
        "description": "Sleeps for 10 seconds before providing a 200 response.",
        "operationId": "Health_GetSlowTransaction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.GetCalendar": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Retreives previously registered calendar data.",
        "operationId": "CalendarIntegration_GetCalendarByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An employee calendar object.",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.RegisterCalendar": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Begins the registration process for calendar integration.",
        "description": "<strong>CalendarIntegrationRegistrationParameters:</strong> CalendarIntegrationRegistrationParameters object holding the parameters for registering a personal calendar.\r\n            \r\n             CalendarIntegrationRegistrationParameters\r\n             {\r\n                 \"calendarType\": 0,    //The type of calendar being registered.\r\n                 \"emailAddress\": null, //The user's email address being registered.\r\n                 \"subscriptionTypes\": null, //The types of data the user is subscribing to. 1 - Schedule data, 2 - Time off data\r\n                 \"appSpecificPassword\": null //The user's app specific password for Apple integration.\r\n             }",
        "operationId": "CalendarIntegration_RegisterCalendarByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "CalendarIntegrationRegistrationParameters": {
                  "$ref": "#/definitions/CalendarIntegrationRegistrationParameters"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Redirection URL for OAuth authorization, if needed.",
            "schema": {
              "$ref": "#/definitions/CalendarIntegrationRegisterResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.UnregisterCalendar": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Removes calendar integration.",
        "description": "<strong>EmployeeCalendarInfoId:</strong>The user's employee calendar info ID",
        "operationId": "CalendarIntegration_UnregisterCalendarByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "EmployeeCalendarInfoId"
              ],
              "type": "object",
              "properties": {
                "EmployeeCalendarInfoId": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.AppleTokenVerification": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Validates a user received their Apple verification token and \r\ncontinues the registration process.",
        "description": "<strong>AppleToken:</strong>A one-time code generated by apple that is sent to the user's email address",
        "operationId": "CalendarIntegration_AppleTokenVerificationByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "{Microsoft.AspNet.OData.ODataActionParameters} that should contain one entry, \"AppleToken\".",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "AppleToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success or failure message.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Error registering calendar or adding calendar sync queue item"
          },
          "643": {
            "description": "User has already registered a calendar"
          },
          "645": {
            "description": "Registration does not exist for user"
          },
          "646": {
            "description": "Invalid Calendar Integration Token"
          }
        },
        "deprecated": false
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.UpdateCalendarIntegrationDataTypes": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Updates calendar integration registered data types (Schedule / TimeOff)",
        "description": "<strong>CalendarIntegrationDataTypes:</strong>Enumerated list of integer values for CalendarDataType.FeatureTypes\r\n                   \r\n                1. Schedule = 1\r\n                2. TimeOff = 2\r\n                3. Holiday = 3",
        "operationId": "CalendarIntegration_UpdateCalendarIntegrationDataTypesByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "{Microsoft.AspNet.OData.ODataActionParameters} that should contain one entry, \"CalendarIntegrationDataTypes\".",
            "required": true,
            "schema": {
              "required": [
                "CalendarIntegrationDataTypes"
              ],
              "type": "object",
              "properties": {
                "CalendarIntegrationDataTypes": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success or failure message.",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CalendarIntegration({EmployeeCalendarInfoID})/Employee.ResendAppleVerificationToken": {
      "post": {
        "tags": [
          "CalendarIntegration"
        ],
        "summary": "Resends Apple Verification Token",
        "description": "<strong>AppleVerificationEmail:</strong> Apple verification email address.",
        "operationId": "CalendarIntegration_ResendAppleVerificationTokenByEmployeecalendarinfoid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmployeeCalendarInfoID",
            "in": "path",
            "description": "key: EmployeeCalendarInfoID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "{Microsoft.AspNet.OData.ODataActionParameters}",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "AppleVerificationEmail": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success or failure message.",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CompTime({CompTimePolicyID})/Employee.GetCompTimePolicy": {
      "post": {
        "tags": [
          "CompTime"
        ],
        "summary": "Retrieves the comp time policy for a user.",
        "description": "Use this method to retrieve the comp time policy for a user.",
        "operationId": "CompTime_GetCompTimePolicyByComptimepolicyid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CompTimePolicyID",
            "in": "path",
            "description": "key: CompTimePolicyID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A comp time policy object.",
            "schema": {
              "$ref": "#/definitions/CompTimePolicyModel"
            }
          },
          "604": {
            "description": "If the specified user is not found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/CompTime({CompTimePolicyID})/Employee.GetCompTimeRequests": {
      "post": {
        "tags": [
          "CompTime"
        ],
        "summary": "Retrieves the comp time requests for a given user and date range.",
        "description": "<strong>StartDate:</strong> The start date from when to retrieve the comp time requests.<br /><strong>EndDate:</strong> The end date until when to retrieve the comp time requests.",
        "operationId": "CompTime_GetCompTimeRequestsByComptimepolicyid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CompTimePolicyID",
            "in": "path",
            "description": "key: CompTimePolicyID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "StartDate",
                "EndDate"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "EndDate": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A comp time request object.",
            "schema": {
              "$ref": "#/definitions/CompTimeRequest"
            }
          },
          "604": {
            "description": "If the specified user is not found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/CompTime({CompTimePolicyID})/Employee.AddCompTimeRequest": {
      "post": {
        "tags": [
          "CompTime"
        ],
        "summary": "Add a comp time request for a user with date range, bank hours and a note specified.",
        "description": "<strong>StartDate:</strong> The start date of the period for which comp time is requested.<br /><strong>EndDate:</strong> The end date of the period for which comp time is requested.<br /><strong>RequestedCompTime:</strong> The hours to be banked as comp time.<br /><strong>Note:</strong> Note added by the employee.<br />",
        "operationId": "CompTime_AddCompTimeRequestByComptimepolicyid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CompTimePolicyID",
            "in": "path",
            "description": "key: CompTimePolicyID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "RequestedCompTime"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                },
                "RequestedCompTime": {
                  "format": "decimal",
                  "type": "number"
                },
                "Note": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A submit comp time response object.",
            "schema": {
              "$ref": "#/definitions/SubmitCompTimeResponse"
            }
          },
          "604": {
            "description": "If the specified user is not found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/CompTime({CompTimePolicyID})/Employee.DeleteCompTimeRequest": {
      "post": {
        "tags": [
          "CompTime"
        ],
        "summary": "Delete a comp time request for a user with Comp time request ID.",
        "description": "<strong>CompTimeRequestID:</strong> The comp time request ID that needs to be deleted.<br />",
        "operationId": "CompTime_DeleteCompTimeRequestByComptimepolicyid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CompTimePolicyID",
            "in": "path",
            "description": "key: CompTimePolicyID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "CompTimeRequestID"
              ],
              "type": "object",
              "properties": {
                "CompTimeRequestID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A delete comp time response object.",
            "schema": {
              "$ref": "#/definitions/DeleteCompTimeResponse"
            }
          },
          "604": {
            "description": "If the specified user is not found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/EmployeeCalendar({ID})/Employee.GetEmployeeCalendar": {
      "post": {
        "tags": [
          "EmployeeCalendar"
        ],
        "summary": "Retrieves a list of items to display on the Employee Calendar.",
        "description": "Use this method to get a list of items for employee calendar, excluding schedule data.",
        "operationId": "EmployeeCalendar_GetEmployeeCalendarByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": true,
            "schema": {
              "required": [
                "StartDate",
                "EndDate"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "EndDate": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee calendar objects.",
            "schema": {
              "$ref": "#/definitions/EmployeeCalendar"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/EmployeeCalendar({ID})/Employee.GetMobileScrollCalendarIndicators": {
      "post": {
        "tags": [
          "EmployeeCalendar"
        ],
        "summary": "Retrieves a list of dates to display indicators on the mobile scroll calendar",
        "description": "Use this method to get a list of dates to display indicators on the mobile scroll calendar.",
        "operationId": "EmployeeCalendar_GetMobileScrollCalendarIndicatorsByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": true,
            "schema": {
              "required": [
                "StartDate",
                "EndDate",
                "IncludeTimeOffData",
                "IncludeScheduleData"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "EndDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "IncludeTimeOffData": {
                  "type": "boolean"
                },
                "IncludeScheduleData": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of integers representing dates to display the indicator dots on the mobile scroll calendar.",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/EmployeeCalendarDetail({ID})/Employee.GetEmployeeDayDetails": {
      "post": {
        "tags": [
          "EmployeeCalendarDetail"
        ],
        "summary": "Gets the all time off request and approval details for the specified user and specified date.",
        "operationId": "EmployeeCalendarDetail_GetEmployeeDayDetailsByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "Date",
                "IncludeTimeOffData",
                "IncludeScheduleData"
              ],
              "type": "object",
              "properties": {
                "Date": {
                  "format": "date-time",
                  "type": "string"
                },
                "IncludeTimeOffData": {
                  "type": "boolean"
                },
                "IncludeScheduleData": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee calendar detail objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeCalendarDetail"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/EmployeeCalendarDetail({ID})/Employee.GetDayDetailsOfOthers": {
      "post": {
        "tags": [
          "EmployeeCalendarDetail"
        ],
        "summary": "Gets the paginated details of others for the specified user and specified Date.",
        "operationId": "EmployeeCalendarDetail_GetDayDetailsOfOthersByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "Date"
              ],
              "type": "object",
              "properties": {
                "Date": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee calendar detail objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeCalendarDetail"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/EmployeeCalendarDetail({ID})/Employee.GetHolidayDayDetail": {
      "post": {
        "tags": [
          "EmployeeCalendarDetail"
        ],
        "summary": "Gets the holiday details for the specified user and the specified date.",
        "operationId": "EmployeeCalendarDetail_GetHolidayDayDetailByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "Date"
              ],
              "type": "object",
              "properties": {
                "Date": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A holiday object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeCalendarDetail"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/FATDetails('{FATName}')/Employee.GetFeatureAccessTemplateAssignment": {
      "post": {
        "tags": [
          "FATDetails"
        ],
        "summary": "Loads the feature access template for the specified user.",
        "description": "Use this method to get the Feature Access Template details for the employee.",
        "operationId": "FATDetails_GetFeatureAccessTemplateAssignmentByFatname",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "FATName",
            "in": "path",
            "description": "key: FATName",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A feature access template object.",
            "schema": {
              "$ref": "#/definitions/FATResult"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/FeatureAssignment({FeatureAssignmentID})/Employee.GetCustomerFeatureAssignments": {
      "post": {
        "tags": [
          "FeatureAssignment"
        ],
        "summary": "Retrieves the currently assigned features for the specified customer.",
        "description": "Use this method to get the feature assignments for a customer.",
        "operationId": "FeatureAssignment_GetCustomerFeatureAssignmentsByFeatureassignmentid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "FeatureAssignmentID",
            "in": "path",
            "description": "key: FeatureAssignmentID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of feature assignment objects.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevel({LaborLevelID})/Employee.GetLaborLevelAssignmentsForDate": {
      "post": {
        "tags": [
          "LaborLevel"
        ],
        "summary": "Retrieves the assigned Labor Levels for the user on the specified date",
        "description": "Use this method to get the labor level assignments for the employee on a date",
        "operationId": "LaborLevel_GetLaborLevelAssignmentsForDateByLaborlevelid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LaborLevelID",
            "in": "path",
            "description": "key: LaborLevelID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "EffectiveDate": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A labor level assignment object for the given date..",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vLLAssignments"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevel({LaborLevelID})/Employee.GetHomeLaborLevelsForDateRange": {
      "post": {
        "tags": [
          "LaborLevel"
        ],
        "summary": "Retrieves the home labor levels for the user during a given date range",
        "description": "Use this method to get the LLDetailID and display name for home labor levels.",
        "operationId": "LaborLevel_GetHomeLaborLevelsForDateRangeByLaborlevelid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LaborLevelID",
            "in": "path",
            "description": "key: LaborLevelID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                },
                "DisplayedOrgUnit": {
                  "format": "int32",
                  "type": "integer"
                },
                "LLDetailDisplayType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Home labor level information for a date range.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HomeLaborLevelModel"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevel({LaborLevelID})/Employee.GetLaborLevelDisplayNamesForSchedule": {
      "post": {
        "tags": [
          "LaborLevel"
        ],
        "summary": "Retrieves labor level names for the passed in schedule/adv. schedule labor level detail IDs.",
        "description": "ODataActionParameters should contain an entry named \"GetLaborLevelNameRequestList\" which holds a list of {AppOne.ClientDatabaseEntities.Models.GetLaborLevelNameRequest} objects.",
        "operationId": "LaborLevel_GetLaborLevelDisplayNamesForScheduleByLaborlevelid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LaborLevelID",
            "in": "path",
            "description": "key: LaborLevelID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "GetLaborLevelNameRequestList": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GetLaborLevelNameRequest"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object for mapping labor level display names to a schedule or advanced schedule.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetLaborLevelNameResponse"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevel({LaborLevelID})/Employee.ValidateLaborLevels": {
      "post": {
        "tags": [
          "LaborLevel"
        ],
        "summary": "Validate the LLDetails in the request are assigned and valid for the user on the EffectiveDate",
        "description": "If all the LLDetails in the request are valid, the same collection is returned unchanged.\r\nAn overall hasChanges flag is added in the response to indicate if any detail on any shift was invalid.\r\nThe isModified flag on each shift indicates if that particular shift was changed.\r\nIf a shift was changed, a new LLDetailName is created and populated and returned with the shift.",
        "operationId": "LaborLevel_ValidateLaborLevelsByLaborlevelid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LaborLevelID",
            "in": "path",
            "description": "key: LaborLevelID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "LaborLevelValidation": {
                  "$ref": "#/definitions/LaborLevelValidation"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validate",
            "schema": {
              "$ref": "#/definitions/LaborLevelValidationResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevel({LaborLevelID})/Employee.GetAllLaborLevels": {
      "post": {
        "tags": [
          "LaborLevel"
        ],
        "summary": "Get all labor levels defined for a client",
        "operationId": "LaborLevel_GetAllLaborLevelsByLaborlevelid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LaborLevelID",
            "in": "path",
            "description": "key: LaborLevelID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "GetAllLaborLevels action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object consisting of a list of labor levels defined for a client.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LaborLevelOrgUnit"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LaborLevelHierarchy({LLDetailID})/Employee.GetLaborLevelHierarchyForDate": {
      "post": {
        "tags": [
          "LaborLevelHierarchy"
        ],
        "summary": "Retrieves the hierarchy of active labor levels for the user on a given date",
        "description": "Use this method to get the hierarchy of active labor levels for the user on a specific day",
        "operationId": "LaborLevelHierarchy_GetLaborLevelHierarchyForDateByLldetailid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LLDetailID",
            "in": "path",
            "description": "key: LLDetailID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "EffectiveDate": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A labor level hierarchy object for the given date.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LaborLevelHierarchy"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetGoogleMapAPIKey": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Get the GoogleMapAPIKey for the google map api service from web.config file.",
        "operationId": "MileageCalculator_GetGoogleMapAPIKeyByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The api key of google map.",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetGoogleMapAPIScript": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Get the GoogleMapAPI Script",
        "operationId": "MileageCalculator_GetGoogleMapAPIScriptByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The google map script.",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetTripState": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Gets the trip state",
        "operationId": "MileageCalculator_GetTripStateByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A trip state response object",
            "schema": {
              "$ref": "#/definitions/TripStateResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.StartTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Saves the location provided by user which will have latitude, longitude, acuracy",
        "operationId": "MileageCalculator_StartTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "Latitude",
                "Longitude",
                "SourceType",
                "Accuracy"
              ],
              "type": "object",
              "properties": {
                "Address": {
                  "type": "string"
                },
                "Latitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "Longitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                },
                "Accuracy": {
                  "format": "decimal",
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.AddStop": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Adds a stop to user's mileage calculator trip.",
        "operationId": "MileageCalculator_AddStopByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "Latitude",
                "Longitude",
                "SourceType",
                "Accuracy",
                "Distance"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "Address": {
                  "type": "string"
                },
                "Latitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "Longitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                },
                "Accuracy": {
                  "format": "decimal",
                  "type": "number"
                },
                "Distance": {
                  "format": "decimal",
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "$ref": "#/definitions/AddStopResponse"
            }
          },
          "600": {
            "description": "If the trip is not started or too many stops."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.EndTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "End user's mileage calculator trip.",
        "operationId": "MileageCalculator_EndTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "Latitude",
                "Longitude",
                "SourceType",
                "Accuracy",
                "Distance"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "Address": {
                  "type": "string"
                },
                "Latitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "Longitude": {
                  "format": "decimal",
                  "type": "number"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                },
                "Accuracy": {
                  "format": "decimal",
                  "type": "number"
                },
                "Distance": {
                  "format": "decimal",
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "Invalid parameters."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.RevertEndTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "revert users ended mileage calculator trip to started by removing the destination stop.",
        "operationId": "MileageCalculator_RevertEndTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "SourceType"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "Invalid parameters."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.UpdateRouteData": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Update user's mileage calculator trip route stops.",
        "operationId": "MileageCalculator_UpdateRouteDataByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "SourceType"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "RouteDataRequest": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteDataRequest"
                  }
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "Invalid parameters."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.IsMileageCalculatorAvailable": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Check if mileage calculation is available for the user.",
        "operationId": "MileageCalculator_IsMileageCalculatorAvailableByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.CancelTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Cancel the current trip if user is valid and mileage calculation is available for the user.",
        "operationId": "MileageCalculator_CancelTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "SourceType"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "If the trip is not started or trip is already submitted."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetMileagePayAdjustmentTypes": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "This controller returns a list of client level mileage pay adjustment types",
        "operationId": "MileageCalculator_GetMileagePayAdjustmentTypesByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mileage pay adjustment model object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayAdjustmentTypeResponse"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetRouteData": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Returns a list of route data added",
        "operationId": "MileageCalculator_GetRouteDataByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of route data model object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RouteDataResponse"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.SubmitTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Submit user's mileage calculator trip.",
        "operationId": "MileageCalculator_SubmitTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "PayAdjustmentID",
                "SourceType"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayAdjustmentID": {
                  "format": "int32",
                  "type": "integer"
                },
                "LaborLevelDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "JobCostingDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "LaborDistributionDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "RouteData": {
                  "type": "string"
                },
                "Notes": {
                  "type": "string"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "Invalid parameters."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.SaveTrip": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Saves user's mileage calculator trip details.",
        "operationId": "MileageCalculator_SaveTripByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID",
                "PayAdjustmentID",
                "SourceType"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayAdjustmentID": {
                  "format": "int32",
                  "type": "integer"
                },
                "LaborLevelDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "JobCostingDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "LaborDistributionDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "Notes": {
                  "type": "string"
                },
                "SourceType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the action succeeded.",
            "schema": {
              "type": "boolean"
            }
          },
          "600": {
            "description": "Invalid parameters."
          },
          "663": {
            "description": "If the user mismatches."
          }
        },
        "deprecated": false
      }
    },
    "/odata/MileageCalculator({MileageCalculationDataID})/Employee.GetTripDetails": {
      "post": {
        "tags": [
          "MileageCalculator"
        ],
        "summary": "Get the trip details",
        "operationId": "MileageCalculator_GetTripDetailsByMileagecalculationdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "MileageCalculationDataID",
            "in": "path",
            "description": "key: MileageCalculationDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "MileageCalculationDataID"
              ],
              "type": "object",
              "properties": {
                "MileageCalculationDataID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A trip details response object",
            "schema": {
              "$ref": "#/definitions/TripDetailsResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustment({PayAdjustmentID})/Employee.GetPayAdjustmentTypes": {
      "post": {
        "tags": [
          "PayAdjustment"
        ],
        "summary": "This controller returns a list of client level pay adjustment types",
        "operationId": "PayAdjustment_GetPayAdjustmentTypesByPayadjustmentid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentID",
            "in": "path",
            "description": "key: PayAdjustmentID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pay adjustment model object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayAdjustmentModel"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustment({PayAdjustmentID})/Employee.GetPreferencePayAdjustmentTypeIDs": {
      "post": {
        "tags": [
          "PayAdjustment"
        ],
        "summary": "This controller returns a list of PayAdjustmentIDs that are allowable for the user to enter\r\nif the preference policy limits pay adjustments.",
        "operationId": "PayAdjustment_GetPreferencePayAdjustmentTypeIDsByPayadjustmentid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentID",
            "in": "path",
            "description": "key: PayAdjustmentID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "PreferenceID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of PayAdjustmentIDs.",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustment({PayAdjustmentID})/Employee.GetLLOverridePayRate": {
      "post": {
        "tags": [
          "PayAdjustment"
        ],
        "summary": "Returns a labor level override pay rate for a given labor level detail ID",
        "operationId": "PayAdjustment_GetLLOverridePayRateByPayadjustmentid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentID",
            "in": "path",
            "description": "key: PayAdjustmentID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "LLDetailID",
                "EffectiveDate"
              ],
              "type": "object",
              "properties": {
                "LLDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "EffectiveDate": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A labor level override pay rate decimal value.",
            "schema": {
              "format": "decimal",
              "type": "number"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustmentData({PayAdjustmentDataID})/Employee.AddPayAdjustmentData": {
      "post": {
        "tags": [
          "PayAdjustmentData"
        ],
        "summary": "Adds a pay adjustment to the PayAdjustmentData table for the user.",
        "description": "<strong>PayAdjustmentDate:</strong> The date in which the pay adjustment is effective.<br /><strong>Unit:</strong> The number of units the pay is being adjusted by.<br /><strong>PayPerUnit:</strong> The amount of pay adjusted per unit.<br /><strong>PayAdjustmentDataType:</strong> What Type of PayAdjustmentData is being sent. Can be represented by (0 = Manual, 1 = Callback, 2 = SpreadOfHours).<br /><strong>PayAdjustmentDataSource:</strong> Can be represented by (0 = Manual, 1 = TimecardEngine).<br /><strong>ClosedType:</strong> Can be represented by (0 = Open, 1 = Locked, 2 = Closed, 3 = Converted).<br />",
        "operationId": "PayAdjustmentData_AddPayAdjustmentDataByPayadjustmentdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentDataID",
            "in": "path",
            "description": "key: PayAdjustmentDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "PayAdjustmentData": {
                  "$ref": "#/definitions/PayAdjustmentData"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The return code for the add.",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustmentData({PayAdjustmentDataID})/Employee.DeletePayAdjustmentData": {
      "post": {
        "tags": [
          "PayAdjustmentData"
        ],
        "summary": "Deletes a pay adjustment data record",
        "description": "<strong>PayAdjustmentDataID:</strong> The ID Of the PayAdjustmentData record to be deleted",
        "operationId": "PayAdjustmentData_DeletePayAdjustmentDataByPayadjustmentdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentDataID",
            "in": "path",
            "description": "key: PayAdjustmentDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters lPayAdjustmentDataID",
            "required": true,
            "schema": {
              "required": [
                "PayAdjustmentDataID"
              ],
              "type": "object",
              "properties": {
                "PayAdjustmentDataID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if record was deleted",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustmentData({PayAdjustmentDataID})/Employee.GetPayAdjustmentData": {
      "post": {
        "tags": [
          "PayAdjustmentData"
        ],
        "summary": "Returns a list of client level pay adjustment types",
        "description": "<strong>StartDate:</strong> The start date for the range of requested pay adjustment data to retrieve data for.<br /><strong>EndDate:</strong> The end date for the range of requested pay adjustment data to retrieve data for.",
        "operationId": "PayAdjustmentData_GetPayAdjustmentDataByPayadjustmentdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentDataID",
            "in": "path",
            "description": "key: PayAdjustmentDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A pay adjustment data model object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayAdjustmentData"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustmentData({PayAdjustmentDataID})/Employee.UpdateEmployeeApproval": {
      "post": {
        "tags": [
          "PayAdjustmentData"
        ],
        "summary": "Updates the employee approval for one or more pay adjustments",
        "description": "<strong>PayAdjustmentDataIDs:</strong> A list of PayAdjustmentDataIDs.<br /><strong>IsApproved:</strong> The desired employee approval.",
        "operationId": "PayAdjustmentData_UpdateEmployeeApprovalByPayadjustmentdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentDataID",
            "in": "path",
            "description": "key: PayAdjustmentDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "PayAdjustmentDataIDs",
                "IsApproved"
              ],
              "type": "object",
              "properties": {
                "PayAdjustmentDataIDs": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "IsApproved": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if any records were updated.",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayAdjustmentData({PayAdjustmentDataID})/Employee.UpdatePayAdjustmentData": {
      "post": {
        "tags": [
          "PayAdjustmentData"
        ],
        "summary": "Updates a pay adjustment in the PayAdjustmentData table for the user.",
        "description": "<strong>PayAdjustmentDate:</strong> The date in which the pay adjustment is effective.<br /><strong>Unit:</strong> The number of units the pay is being adjusted by.<br /><strong>PayPerUnit:</strong> The amount of pay adjusted per unit.<br /><strong>PayAdjustmentDataType:</strong> What Type of PayAdjustmentData is being sent. Can be represented by (0 = Manual, 1 = Callback, 2 = SpreadOfHours).<br /><strong>PayAdjustmentDataSource:</strong> Can be represented by (0 = Manual, 1 = TimecardEngine).<br /><strong>ClosedType:</strong> Can be represented by (0 = Open, 1 = Locked, 2 = Closed, 3 = Converted).<br />",
        "operationId": "PayAdjustmentData_UpdatePayAdjustmentDataByPayadjustmentdataid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PayAdjustmentDataID",
            "in": "path",
            "description": "key: PayAdjustmentDataID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "PayAdjustmentData": {
                  "$ref": "#/definitions/PayAdjustmentData"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The return code for the update.",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayrollPolicy({ID})/Employee.GetPayrollPolicyAssignment": {
      "post": {
        "tags": [
          "PayrollPolicy"
        ],
        "summary": "Retrieves the payroll policy for a user.",
        "description": "Use this method to retrieve the payroll policy for a user.",
        "operationId": "PayrollPolicy_GetPayrollPolicyAssignmentByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A payroll policy object.",
            "schema": {
              "$ref": "#/definitions/vPayrollPolicy"
            }
          },
          "602": {
            "description": "User does not have payroll policy assignment."
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayType({ID})/Employee.GetPayTypes": {
      "post": {
        "tags": [
          "PayType"
        ],
        "summary": "Gets all active pay types for the date range",
        "description": "<strong>StartDate:</strong> Start date of the effective date range.<br /><strong>EndDate:</strong> End date of the effective date range.",
        "operationId": "PayType_GetPayTypesByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Pay Types for the provided date range",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayTypeModel"
              }
            }
          },
          "600": {
            "description": "The request does not contain either StartDate or EndDate"
          }
        },
        "deprecated": false
      }
    },
    "/odata/PayType({ID})/Employee.GetAllowedPayTypes": {
      "post": {
        "tags": [
          "PayType"
        ],
        "summary": "Gets all active work pay types and all allowed non-work pay types for the date range.",
        "description": "Non-work typed can be limited, and limited differently depending on the \r\nPreference policy and the entry type (TimesheetExpress, Timesheet, etc.).\r\nThe ActionSectionType parameter specifies which entry type limit to use.<br /><br /><strong>StartDate:</strong> Start date of the effective date range.<br /><strong>EndDate:</strong> End date of the effective date range.<br /><strong>PreferenceID:</strong> The ID of preference assigned to user.<br /><strong>ActionSectionTypes:</strong><br />\r\nTimesheetEntry = 0<br />\r\nPeriodEntry = 1<br />\r\nTemplateEntry = 2<br />\r\nExpressEntry = 3<br />\r\nMatrixEntry = 4<br />",
        "operationId": "PayType_GetAllowedPayTypesByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "key: ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": true,
            "schema": {
              "required": [
                "PreferenceID",
                "ActionSectionType"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                },
                "PreferenceID": {
                  "format": "int32",
                  "type": "integer"
                },
                "ActionSectionType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Allowed Pay Types for the provided date range",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayTypeModel"
              }
            }
          },
          "600": {
            "description": "The request does not contain any of the required parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Punch({TimeSlicePreID})/Employee.AddPunch": {
      "post": {
        "tags": [
          "Punch"
        ],
        "summary": "Adds a punch for a user.",
        "description": "<strong>TransactionType:</strong> The punch type (integer). Can be any of the following: ClockIn = 2, ClockOut = 3, StartLunch = 4,\r\n            EndLunch = 5, StartBreak = 6, EndBreak = 7, Transfer = 8, CallBack = 15<br /><strong>EmployeeNote:</strong> Optional. An employee note for the manager.<br /><strong>LaborLevelDetailID:</strong> The labor level detail ID for the punch.<br /><strong>JobCostingDetailID:</strong> The job costing detail ID for the punch.<br /><strong>LaborDistributionDetailID:</strong> The labor distribution detail ID for the punch.<br /><strong>IsMobileDevice:</strong> Set to true if request coming from a mobile device.<br /><strong>LocationCoordinates:</strong> Only required if client is configured for geofencing. The location the punch is coming from in the format \"latitude, longitude, accuracy\".<br /><strong>PunchPromptAnswers:</strong> An array of PunchPromptAnswer objects.\r\n            <strong>PostShiftTransactionDatetime:</strong> A datetime specified for post shift transfers.<br />",
        "operationId": "Punch_AddPunchByTimeslicepreid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TimeSlicePreID",
            "in": "path",
            "description": "key: TimeSlicePreID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "IsMobileDevice"
              ],
              "type": "object",
              "properties": {
                "TransactionType": {
                  "format": "int32",
                  "type": "integer"
                },
                "EmployeeNote": {
                  "type": "string"
                },
                "LaborLevelDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "JobCostingDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "LaborDistributionDetailID": {
                  "format": "int32",
                  "type": "integer"
                },
                "IsMobileDevice": {
                  "type": "boolean"
                },
                "LocationCoordinates": {
                  "type": "string"
                },
                "PunchPromptAnswers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PunchPromptEmpAnswer"
                  }
                },
                "PostShiftTransactionDatetime": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A status board object.",
            "schema": {
              "$ref": "#/definitions/vStatusBoard"
            }
          },
          "606": {
            "description": "The punch you are attempting to add was preceded by a punch of the same type."
          },
          "607": {
            "description": "A punch you are attempting to add was preceded by an opposing punch."
          },
          "608": {
            "description": "The user's time card is locked."
          },
          "609": {
            "description": "The user's time card is closed."
          },
          "610": {
            "description": "The labor level detail ID associated with punch is not assigned to user."
          },
          "611": {
            "description": "The job costing detail ID associated with punch is not assigned to user."
          },
          "612": {
            "description": "The labor distribution detail ID associated with punch is not assigned to user."
          },
          "613": {
            "description": "The user is restricted to only clocking in when they are scheduled."
          },
          "614": {
            "description": "The user is restricted to only clocking in when they are scheduled, but have no future schedules."
          },
          "618": {
            "description": "You attempted to end meal, but it's too early."
          },
          "620": {
            "description": "A configured IP access policy has blocked the punch."
          },
          "621": {
            "description": "The user is not eligible to take a break."
          },
          "622": {
            "description": "The user must wait to take a break."
          },
          "623": {
            "description": "If geolocation is required for the punch and no coordinates were passed."
          },
          "624": {
            "description": "If the punch was made from outside the configured geofence."
          },
          "625": {
            "description": "The callback punch is not allowed for this user."
          }
        },
        "deprecated": false
      }
    },
    "/odata/Punch({TimeSlicePreID})/Employee.AddMissingPunch": {
      "post": {
        "tags": [
          "Punch"
        ],
        "summary": "Add one or more missing punches",
        "description": "<strong>MissingPunches:</strong> An array of punch objects<br /><u>Punch Schema:</u><br /><strong>TransactionLocalDateTime:</strong> The date and time for the punch expressed in the time zone\r\n            of the EE who owns the punch<br /><strong>TransactionType:</strong> The punch type (integer). Can be any of the following: ClockIn = 2, ClockOut = 3, StartLunch = 4,\r\n            EndLunch = 5, StartBreak = 6, EndBreak = 7, Transfer = 8, CallBack = 15<br /><strong>EmployeeNote:</strong> Optional. An employee note for the manager.<br /><strong>LaborLevelDetailID:</strong> The labor level detail ID for the punch.<br /><strong>JobCostingDetailID:</strong> The job costing detail ID for the punch.<br /><strong>LaborDistributionDetailID:</strong> The labor distribution detail ID for the punch.<br /><strong>LocationCoordinates:</strong> Not used for adding missing punches.",
        "operationId": "Punch_AddMissingPunchByTimeslicepreid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TimeSlicePreID",
            "in": "path",
            "description": "key: TimeSlicePreID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "MissingPunches": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Punch"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add one or more missing punches",
            "schema": {
              "type": "boolean"
            }
          },
          "608": {
            "description": "The user's time card is locked."
          },
          "609": {
            "description": "The user's time card is closed."
          },
          "610": {
            "description": "The labor level detail ID associated with punch is not assigned to user."
          },
          "611": {
            "description": "The job costing detail ID associated with punch is not assigned to user."
          },
          "612": {
            "description": "The labor distribution detail ID associated with punch is not assigned to user."
          },
          "625": {
            "description": "The callback punch is not allowed for this user."
          }
        },
        "deprecated": false
      }
    },
    "/odata/Punch({TimeSlicePreID})/Employee.GetNextLogicalTransactionType": {
      "post": {
        "tags": [
          "Punch"
        ],
        "summary": "Get next logical Transaction type based on the user's punch status, schedule, preferences, etc.",
        "description": "<strong>StatusType:</strong> The current status type (int) of the user. Can be any of the following:\r\n            None = -1, Absent = 0, Working = 1, Out = 2, AtLunch = 3, OnBreak = 4",
        "operationId": "Punch_GetNextLogicalTransactionTypeByTimeslicepreid",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "TimeSlicePreID",
            "in": "path",
            "description": "key: TimeSlicePreID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StatusType": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A transaction type integer. One of the following: ClockIn = 2, ClockOut = 3, StartLunch = 4, EndLunch = 5, StartBreak = 6, EndBreak = 7, Transfer = 8"
          }
        },
        "deprecated": false
      }
    },
    "/odata/PunchPrompt({PunchPromptQuestionID})/Employee.GetPunchPrompts": {
      "post": {
        "tags": [
          "PunchPrompt"
        ],
        "summary": "Gets the punch prompts for a user to present at the time of a punch.",
        "description": "Use this method to get the punch prompts for the user.",
        "operationId": "PunchPrompt_GetPunchPromptsByPunchpromptquestionid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PunchPromptQuestionID",
            "in": "path",
            "description": "key: PunchPromptQuestionID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of punch prompt objects.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "600": {
            "description": "The request does not contain ODataActionParameters object"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Report({ReportSettingID})/Employee.IsEmailTimecardOptionAvailable": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Checks whether the Employee Time card report is assigned to the preference policy of the logged in user or not",
        "operationId": "Report_IsEmailTimecardOptionAvailableByReportsettingid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ReportSettingID",
            "in": "path",
            "description": "key: ReportSettingID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "IsEmailTimecardOptionAvailable action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value indicating whether the email timecard buttons should be displayed in UI or not",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Report({ReportSettingID})/Employee.EmailTimecard": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Submits queue item to generate the employee time card report for the given date range in the given report format type",
        "description": "<strong>StartDate:</strong>The start date of the report date range.<br /><strong>EndDate:</strong>The end date of the report date range. <br /><strong>ReportFormatType:</strong> Indicates the report format type as an integer: PDF = 0, Excel = 1<br /><strong>EmailAddress:</strong> Email Address to which the time card report should be sent<br />",
        "operationId": "Report_EmailTimecardByReportsettingid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ReportSettingID",
            "in": "path",
            "description": "key: ReportSettingID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": true,
            "schema": {
              "required": [
                "StartDate",
                "EndDate",
                "ReportFormatType"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "EndDate": {
                  "format": "date-time",
                  "type": "string"
                },
                "ReportFormatType": {
                  "format": "int32",
                  "type": "integer"
                },
                "EmailAddress": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Generate Employee Timecard report in PDF or Excel Format and email it to the user",
            "schema": {
              "$ref": "#/definitions/GenerateReportInQueueResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/StatusBoard({StatusBoardID})/Employee.GetStatusBoard": {
      "post": {
        "tags": [
          "StatusBoard"
        ],
        "summary": "Retrieves the current punch status for the user.",
        "description": "Use this method to get the user's current punch status for the user.",
        "operationId": "StatusBoard_GetStatusBoardByStatusboardid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "StatusBoardID",
            "in": "path",
            "description": "key: StatusBoardID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A status board object.",
            "schema": {
              "$ref": "#/definitions/vStatusBoard"
            }
          },
          "204": {
            "description": "No statusboard was found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/StatusBoard({StatusBoardID})/Employee.GetStatusBoardSummary": {
      "post": {
        "tags": [
          "StatusBoard"
        ],
        "summary": "Returns a summary totals of each status type in the status board.",
        "description": "Use this method to get a summary of the status board status types.",
        "operationId": "StatusBoard_GetStatusBoardSummaryByStatusboardid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "StatusBoardID",
            "in": "path",
            "description": "key: StatusBoardID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A status board summary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatusBoardSummaryModel"
              }
            }
          },
          "204": {
            "description": "No statusboard was found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/StatusBoard({StatusBoardID})/Employee.GetEmployeesForStatusBoard": {
      "post": {
        "tags": [
          "StatusBoard"
        ],
        "summary": "Retrieves status board data for all employees.",
        "description": "Use this method to get the current punch status for status board.",
        "operationId": "StatusBoard_GetEmployeesForStatusBoardByStatusboardid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "StatusBoardID",
            "in": "path",
            "description": "key: StatusBoardID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A status board object.",
            "schema": {
              "$ref": "#/definitions/StatusBoardResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/StatusBoard({StatusBoardID})/Employee.GetLaborLevelDisplayNames": {
      "post": {
        "tags": [
          "StatusBoard"
        ],
        "summary": "Retrieves labor level names to be displayed on Status Board for the passed in list of labor level detail IDs.",
        "description": "<strong>LaborLevelNameRequestList:</strong> An array of request objects consisting of Labor Level IDs for which corresponding Labor Level display names are to be retrieved.",
        "operationId": "StatusBoard_GetLaborLevelDisplayNamesByStatusboardid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "StatusBoardID",
            "in": "path",
            "description": "key: StatusBoardID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "LaborLevelNameRequestList": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GetLaborLevelNameRequest"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary consisting of userId and LaborLevelDisplayName mapping.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "600": {
            "description": "Invalid/insufficient Labor Level information in the request."
          }
        },
        "deprecated": false
      }
    },
    "/odata/TimeCard({UserID})/Employee.GetTimeCard": {
      "post": {
        "tags": [
          "TimeCard"
        ],
        "summary": "Gets the time card information for a selected date range",
        "description": "<strong>StartDate:</strong> The start date of the pay period<br /><strong>EndDate:</strong> The end date of the pay period. <br /><strong>DefaultPeriodType:</strong> Indicates the default pay period types as an integer: CurrentWeek = 0, CurrentPayPeriod = 1, PreviousWeek = 2, PreviousPayPeriod = 3<br /><strong>DateNavigation:</strong> Indicates the time card view that the user has requested. This can have three integer values: Previous = -1, Current = 0, Next = 1<br /><strong>PayrollPolicyID:</strong> The payroll policy ID as an integer.<br /><strong>PayPeriodType:</strong> The pay period type that the policy adheres to. This can have 6 values  Weekly = 0, EveryTwoWeeksOdd = 1, EveryTwoWeeksEven = 2, SemiMonthly = 3, Monthly = 4, Custom = 5 <br /><strong>WorkWeekStartDay:</strong> Indicates the day when the work week starts. This can have 7 values: Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6 <br /><strong>PayPeriodMonthlyDay:</strong> This can have 28 integer values: _1st = 0, _2nd = 1, _3rd = 2, _4th = 3, _5th = 4, _6th = 5, _7th = 6, _8th = 7, _9th = 8, _10th = 9, _11th = 10, _12th = 11, _13th = 12, _14th = 13, _15th = 14, _16th = 15, _17th = 16, _18th = 17, _19th = 18, _20th = 19, _21st = 20, _22nd = 21, _23rd = 22, _24th = 23, _25th = 24, _26th = 25, _27th = 26, _28th = 27, EndOfMonth = 28 <br /><strong>PayPeriodSemiMonthlyDay:</strong> This can have 14 integer values: _1st15th = 0, _2nd16th = 1, _3rd17th = 2, _4th18th = 3, _5th19th = 4, _6th20th = 5, _7th21st = 6, _8th22nd = 7, _9th23rd = 8, _10th24th = 9, _11th25th = 10, _12th26th = 11, _13th27th = 12, _14th28th = 13, _15thEndofMonth = 14 <br /><strong>CustomPayPeriodDateType:</strong> Indicates if the custom pay period is either 0 or 1, where 0=Absolute and 1=Relative. <br /><strong>PayrollPolicyStartDate:</strong> Date on which the payroll policy starts. <br /><strong>PayrollPolicyEndDate:</strong> Date on which the payroll policy ends. <br /><strong>LLDetailDisplayType:</strong> Option on how to display labour level(taken as integer). The options are: Name_Code = 0, Code_Name = 1, Name = 2, Code = 3 <br /><strong>DisplayedOrgUnit:</strong> Org Unit as an integer. <br />",
        "operationId": "TimeCard_GetTimeCardByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                },
                "DefaultPeriodType": {
                  "format": "int32",
                  "type": "integer"
                },
                "DateNavigation": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayrollPolicyID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayPeriodType": {
                  "format": "int32",
                  "type": "integer"
                },
                "WorkWeekStartDay": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayPeriodMonthlyDay": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayPeriodSemiMonthlyDay": {
                  "format": "int32",
                  "type": "integer"
                },
                "CustomPayPeriodDateType": {
                  "format": "int32",
                  "type": "integer"
                },
                "PayrollPolicyStartDate": {
                  "type": "string"
                },
                "PayrollPolicyEndDate": {
                  "type": "string"
                },
                "LLDetailDisplayType": {
                  "format": "int32",
                  "type": "integer"
                },
                "DisplayedOrgUnit": {
                  "format": "int32",
                  "type": "integer"
                },
                "EmpGroupShiftsByTransactionDate": {
                  "type": "boolean"
                },
                "DisplayDaySplitDayEnabled": {
                  "type": "boolean"
                },
                "DisplayDaySplitDay": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shifts for a given TimeCard with daily totals",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeCardModel"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/TimeCard({UserID})/Employee.GetNotes": {
      "post": {
        "tags": [
          "TimeCard"
        ],
        "summary": "Gets all employee and manager notes for shifts in the day",
        "description": "<strong>ApplyToDate:</strong> The date for which the transaction is applied for payroll purposes For eg: \"2014-12-30 00:00:00.000\"<br />",
        "operationId": "TimeCard_GetNotesByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "ApplyToDate": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee and manager notes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeCardNotes"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/TimeCard({UserID})/Employee.ChangeShiftApprovalStatus": {
      "post": {
        "tags": [
          "TimeCard"
        ],
        "summary": "Change the employee approval status of punches and shifts",
        "description": "This method accepts the TimeSlicePostIDs of the shifts to update, and the desired employee approval status.\r\nRecords in the TimeSlicePre table (punches) and TimeSlicePost table (shifts) will be updated.<br /><strong>TspRecordsToChangeApproval:</strong> The time slice post ids that need to be updated.<br /><strong>NewStatus:</strong>This is set to true if the employee has approved the shift<br />",
        "operationId": "TimeCard_ChangeShiftApprovalStatusByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": true,
            "schema": {
              "required": [
                "TspRecordsToChangeApproval",
                "NewStatus"
              ],
              "type": "object",
              "properties": {
                "TspRecordsToChangeApproval": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "NewStatus": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The boolean result",
            "schema": {
              "type": "boolean"
            }
          },
          "604": {
            "description": "If the specified user is not found."
          }
        },
        "deprecated": false
      }
    },
    "/odata/TimeCard({UserID})/Employee.GetShiftTotals": {
      "post": {
        "tags": [
          "TimeCard"
        ],
        "summary": "Gets the sum of TotalPaidDurationSecs for all TimeSlicePost entries in the given date range for the current user.",
        "description": "<strong>StartDateTime:</strong>The start date and time to look for TimeSlicePost entries.<br /><strong>EndDateTime:</strong>The end date and time to look for TimeSlicePost entries.",
        "operationId": "TimeCard_GetShiftTotalsByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters object containing request parameters.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "StartDateTime": {
                  "type": "string"
                },
                "EndDateTime": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sum of total paid duration for all time slice posts in range.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/TimeSheet({UserID})/Employee.SubmitTimeSheetEntries": {
      "post": {
        "tags": [
          "TimeSheet"
        ],
        "summary": "Saves the time sheet changes selected date range",
        "description": "Use this method to submit the time sheet changes a user has made over the selected date range.<br /><strong>StartDate:</strong> The start date for the range of requested timesheet data to retrieve data for.<br /><strong>EndDate:</strong> The end date for the range of requested timesheet data to retrieve data for.<br /><strong>SectionType:</strong> Can have values(0 = TimesheetEntry, 1 = PeriodEntry, 2 = TemplateEntry, 3 = ExpressEntry, 4 = MatrixEntry).<br /><strong>TimeSheetDetails:</strong> Details of the timesheet entry(s) to be submitted.<br />",
        "operationId": "TimeSheet_SubmitTimeSheetEntriesByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": true,
            "schema": {
              "required": [
                "SectionType"
              ],
              "type": "object",
              "properties": {
                "StartDate": {
                  "type": "string"
                },
                "EndDate": {
                  "type": "string"
                },
                "SectionType": {
                  "format": "int32",
                  "type": "integer"
                },
                "TimeSheetDetails": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TimeSheetDetails"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The SubmitTimesheetResponse result",
            "schema": {
              "$ref": "#/definitions/SubmitTimeSheetResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Token({TokenID})/Employee.CreateToken": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Creates a token string for the specified PNGSSOGUID and StratustimeCAID.",
        "description": "Use this method to create a token string for subsequent service calls.<br /><strong>PNGSSOGUID:</strong> The user PNGSSOGUID.<br /><strong>StratusCAID:</strong> The CAID.<br /><strong>OnlineSupportUserName:</strong> The username for online support.",
        "operationId": "Token_CreateTokenByTokenid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TokenID",
            "in": "path",
            "description": "key: TokenID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "An ODataActionParameters object.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "PNGSSOGUID": {
                  "type": "string"
                },
                "StratusCAID": {
                  "type": "string"
                },
                "OnlineSupportUserName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A token string.",
            "schema": {
              "type": "string"
            }
          },
          "600": {
            "description": "The request does not contain either PNGSSOGUID or StratusCAID"
          }
        },
        "deprecated": false
      }
    },
    "/odata/UserInfo({UserID})/Employee.GetUser": {
      "post": {
        "tags": [
          "UserInfo"
        ],
        "summary": "Retrieves the user info object from the UserInfo table in Client database.",
        "description": "Use this method to get the UserInfo object for the employee.",
        "operationId": "UserInfo_GetUserByUserid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UserID",
            "in": "path",
            "description": "key: UserID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "GetUser action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A user object.",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "604": {
            "description": "Requested user not found"
          }
        },
        "deprecated": false
      }
    },
    "/odata/UserPreference({PreferenceID})/Employee.GetUserPreferenceAssignment": {
      "post": {
        "tags": [
          "UserPreference"
        ],
        "summary": "Retrieves the preferences for the user.",
        "description": "Use this method to get the preferences for the user.<br />",
        "operationId": "UserPreference_GetUserPreferenceAssignmentByPreferenceid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PreferenceID",
            "in": "path",
            "description": "key: PreferenceID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "GetUserPreferenceAssignment action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vUserPreference object",
            "schema": {
              "$ref": "#/definitions/vUserPreference"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/UserPreference({PreferenceID})/Employee.UpdateUserPreference": {
      "post": {
        "tags": [
          "UserPreference"
        ],
        "summary": "Updates user preferences",
        "description": "<strong>ODataActionParameters:</strong> Dictionary object holding the parameters to update user preferences.\r\n            \r\n             ODataActionParameters\r\n             {\r\n                 \"TimeFormatType\": 1,                  //1 - AM/PM Standard  format, 0 - Military Format.\r\n                 \"TimeDurationType\": 1,                //1 - Decimal, 0 - Minutes.   \r\n                 \"DefaultCalendarViewType\": 1          //1 - Month View, 2 - Week view\r\n             }",
        "operationId": "UserPreference_UpdateUserPreferenceByPreferenceid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PreferenceID",
            "in": "path",
            "description": "key: PreferenceID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "ODataActionParameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "UserPreference": {
                  "$ref": "#/definitions/UpdateUserPreferencesModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of records affected.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "600": {
            "description": "Parameter not found or invalid request parameter"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "CalendarIntegrationRegistrationParameters": {
      "description": "A class for holding the necessary parameters for registering\r\na personal calendar for integration.",
      "type": "object",
      "properties": {
        "CalendarType": {
          "format": "int32",
          "description": "The type of calendar being registered.",
          "type": "integer"
        },
        "EmailAddress": {
          "description": "The user's email address being registered.",
          "type": "string"
        },
        "SubscriptionTypes": {
          "description": "The types of data the user is subscribing to.\r\n1 - Schedule data,\r\n2 - Time off data",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "AppSpecificPassword": {
          "description": "The user's app specific password for Apple integration.",
          "type": "string"
        }
      }
    },
    "CalendarIntegrationRegisterResponse": {
      "type": "object",
      "properties": {
        "EmployeeCalendarInfoID": {
          "format": "int32",
          "description": "EmployeeCalendarInfoID",
          "type": "integer"
        },
        "RedirectUrl": {
          "description": "RedirectUrl",
          "type": "string"
        }
      }
    },
    "CompTimePolicyModel": {
      "description": "A representation of comp time policy and assignment",
      "type": "object",
      "properties": {
        "CompTimePolicyID": {
          "format": "int32",
          "description": "The ID of the comp time policy record",
          "type": "integer"
        },
        "PolicyStartDate": {
          "format": "date-time",
          "description": "The Start date of the comp time policy",
          "type": "string"
        },
        "PolicyEndDate": {
          "format": "date-time",
          "description": "The End date of the comp time policy",
          "type": "string"
        },
        "AssignmentStartDate": {
          "format": "date-time",
          "description": "The Start date of the comp time policy assignment to a user",
          "type": "string"
        },
        "AssignmentEndDate": {
          "format": "date-time",
          "description": "The End date of the comp time policy assignment to a user",
          "type": "string"
        },
        "ConversionType": {
          "format": "int32",
          "description": "The Conversion type (Auto or Manual) with which the comp time will be converted",
          "type": "integer"
        },
        "IsManagerApprovalRequired": {
          "description": "A boolean value to indicate whether a manager's approval is required for comp time request conversion",
          "type": "boolean"
        },
        "IsConversionTypeExists": {
          "description": "A boolean value to indicate whether the comp time policy details have been set up with the conversion pay types",
          "type": "boolean"
        }
      }
    },
    "CompTimeRequest": {
      "type": "object",
      "properties": {
        "CompTimeRequestID": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "SecsToConvert": {
          "format": "int32",
          "type": "integer"
        },
        "StatusType": {
          "format": "int32",
          "type": "integer"
        },
        "ProcessingStatusType": {
          "format": "int32",
          "type": "integer"
        },
        "DateTimeSubmitted": {
          "format": "date-time",
          "type": "string"
        },
        "EmpNote": {
          "type": "string"
        },
        "StatusChangedBy": {
          "format": "int32",
          "type": "integer"
        },
        "StatusChangedOn": {
          "format": "date-time",
          "type": "string"
        },
        "TimeSlicePreID": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SubmitCompTimeResponse": {
      "description": "A response object used on the return from the AddCompTimeRequestAsync method",
      "type": "object",
      "properties": {
        "CompTimeRequestID": {
          "format": "int32",
          "description": "The ID of the comp time request which was submitted.",
          "type": "integer"
        },
        "RequestStatus": {
          "format": "int32",
          "description": "Indicates if the submitted request is auto-approved or in requested status.",
          "type": "integer"
        },
        "ErrorCode": {
          "description": "An error code if not successful",
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "description": "Whether the submit was successful or not",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      }
    },
    "DeleteCompTimeResponse": {
      "description": "A response object used on the return from the DeleteCompTimeRequestAsync method",
      "type": "object",
      "properties": {
        "ErrorCode": {
          "description": "An error code if not successful",
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "description": "Whether the submit was successful or not",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      }
    },
    "EmployeeCalendar": {
      "description": "A representation of an employee's time off calendar.",
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "BlackOutDates": {
          "description": "vBlackOutDates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vBlackOutDates"
          }
        },
        "Holidays": {
          "description": "vHolidays",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vHolidays"
          }
        },
        "TimeOffRequests": {
          "description": "vTimeOffRequests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vTimeOffRequests"
          }
        },
        "TimeOffApprovals": {
          "description": "vTimeOffApprovals",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vTimeOffApprovals"
          }
        },
        "OthersTimeOffCountByDay": {
          "description": "OthersTimeOffCount",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OthersTimeOffDayCount"
          }
        },
        "Schedules": {
          "description": "vSchedules",
          "type": "string"
        },
        "ScheduleDetails": {
          "description": "vSchedules(denormalized) and ScheduleDetails",
          "type": "string"
        }
      }
    },
    "vBlackOutDates": {
      "type": "object",
      "properties": {
        "BlackoutDateID": {
          "format": "int32",
          "type": "integer"
        },
        "BlackoutDateCount": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeOffPolicyID": {
          "format": "int32",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "vHolidays": {
      "type": "object",
      "properties": {
        "HolidayListDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "IncludeWeekend": {
          "type": "boolean"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "HolidayName": {
          "type": "string"
        },
        "NumberOfDays": {
          "format": "int32",
          "type": "integer"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "vTimeOffRequests": {
      "type": "object",
      "properties": {
        "TimeOffRequestID": {
          "format": "int32",
          "type": "integer"
        },
        "TimeOffRequestDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "StatusType": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "PayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "PayTypeName": {
          "type": "string"
        },
        "TimeSlicePreID": {
          "format": "int32",
          "type": "integer"
        },
        "DurationSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "StartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "EndDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "IncludeWeekends": {
          "type": "boolean"
        },
        "EmpNotes": {
          "type": "string"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        },
        "IsBuyoutRequest": {
          "type": "boolean"
        },
        "IsCalendarSync": {
          "type": "boolean"
        }
      }
    },
    "vTimeOffApprovals": {
      "type": "object",
      "properties": {
        "TimeSlicePostID": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "PayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "PayTypeName": {
          "type": "string"
        },
        "TimeSlicePreIDIn": {
          "format": "int32",
          "type": "integer"
        },
        "TotalPaidDurationSecs": {
          "format": "int32",
          "type": "integer"
        },
        "ActualDateTimeIn": {
          "format": "date-time",
          "type": "string"
        },
        "ActualDateTimeOut": {
          "format": "date-time",
          "type": "string"
        },
        "EmpNoteIn": {
          "type": "string"
        },
        "MgrNoteIn": {
          "type": "string"
        },
        "ApplyToDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsCalendarSync": {
          "format": "int32",
          "type": "integer"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OthersTimeOffDayCount": {
      "description": "View model for storing counts of other (not the current user) time off requests.\r\nNecessary for displaying three dots on scheduler.",
      "type": "object",
      "properties": {
        "StartTime": {
          "format": "date-time",
          "description": "The start time of the time off request.",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "The end time of the time off request.",
          "type": "string"
        },
        "Count": {
          "format": "int32",
          "description": "The number of requests for this time range.",
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[Int32]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ODataResponse[List[EmployeeCalendarDetail]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeCalendarDetail"
          }
        }
      }
    },
    "EmployeeCalendarDetail": {
      "description": "Represents the employee's schedule details.",
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "description": "ID",
          "type": "integer"
        },
        "DurationSeconds": {
          "format": "int32",
          "description": "DurationSeconds",
          "type": "integer"
        },
        "StartDateTime": {
          "format": "date-time",
          "description": "StartDateTime",
          "type": "string"
        },
        "EndDateTime": {
          "format": "date-time",
          "description": "EndDateTime",
          "type": "string"
        },
        "EventType": {
          "format": "int32",
          "description": "EventType",
          "type": "integer"
        },
        "FirstName": {
          "description": "FirstName",
          "type": "string"
        },
        "LastName": {
          "description": "LastName",
          "type": "string"
        },
        "PayTypeName": {
          "description": "PayTypeName",
          "type": "string"
        },
        "HolidayName": {
          "description": "HolidayName",
          "type": "string"
        }
      }
    },
    "FATResult": {
      "description": "Representation of a Stratustime Feature Access Template returned by the FlexTime Service",
      "type": "object",
      "properties": {
        "FATName": {
          "description": "The name of the Stratustime Feature Access Template",
          "type": "string"
        },
        "HasFullAccess": {
          "description": "Boolean indicating if the user has total full access to stratust or limited access",
          "type": "boolean"
        },
        "FATDetails": {
          "description": "A list of FAT Section results for the FAT detail the user is assigned",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FATSectionResult"
          }
        }
      }
    },
    "FATSectionResult": {
      "description": "Contains detailed information about a users access in each section of the FAT",
      "type": "object",
      "properties": {
        "SectionType": {
          "format": "int32",
          "description": "The current section for which the details apply",
          "type": "integer"
        },
        "Details": {
          "description": "A list of the detailed information about the users access in the current section",
          "type": "array",
          "items": {
            "$ref": "#/definitions/vFATDetails"
          }
        }
      }
    },
    "vFATDetails": {
      "type": "object",
      "properties": {
        "FATName": {
          "type": "string"
        },
        "FATHasFullAccess": {
          "type": "boolean"
        },
        "FATStartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "FATEndDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "FATAssignUserID": {
          "format": "int32",
          "type": "integer"
        },
        "FATAssignStartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "FATAssignEndDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "FATDetailSectionType": {
          "format": "int32",
          "type": "integer"
        },
        "FATDetailAllowView": {
          "type": "boolean"
        },
        "FATDetailAllowAdd": {
          "type": "boolean"
        },
        "FATDetailAllowEdit": {
          "type": "boolean"
        },
        "FATDetailAllowDelete": {
          "type": "boolean"
        },
        "FATDetailAllowAssign": {
          "type": "boolean"
        },
        "FATDetailSettingSectionType": {
          "format": "int32",
          "type": "integer"
        },
        "FATDetailSettingAdditionalSettingsType": {
          "format": "int32",
          "type": "integer"
        },
        "FATDetailSettingReportID": {
          "format": "int32",
          "type": "integer"
        },
        "FATDetailSettingIsEnabled": {
          "type": "boolean"
        }
      }
    },
    "ODataResponse[List[String]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataResponse[List[vLLAssignments]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vLLAssignments"
          }
        }
      }
    },
    "vLLAssignments": {
      "type": "object",
      "properties": {
        "LaborLevelID": {
          "format": "int32",
          "type": "integer"
        },
        "LaborLevelName": {
          "type": "string"
        },
        "OrdinalPosition": {
          "format": "int32",
          "type": "integer"
        },
        "DetailID": {
          "format": "int32",
          "type": "integer"
        },
        "DetailCode": {
          "type": "string"
        },
        "DetailName": {
          "type": "string"
        },
        "DetailStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "DetailEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsHomeLaborLevel": {
          "type": "boolean"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "PNGSSOUserGUID": {
          "type": "string"
        },
        "PayrollClientID": {
          "type": "string"
        },
        "PayrollEmployeeID": {
          "format": "int64",
          "type": "integer"
        },
        "DetailAssignStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "DetailAssignEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "PayrollMappingStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "PayrollMappingEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "ColorCode": {
          "type": "string"
        }
      }
    },
    "ODataResponse[List[HomeLaborLevelModel]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HomeLaborLevelModel"
          }
        }
      }
    },
    "HomeLaborLevelModel": {
      "description": "View model for the time sheet which contains the LLDetailID of the home org, jc, and ld\r\nas well as the display name",
      "type": "object",
      "properties": {
        "OrgDetailID": {
          "format": "int32",
          "description": "The LLDetailID of the most detailed home org",
          "type": "integer"
        },
        "JobDetailID": {
          "format": "int32",
          "description": "The LLDetailID of the home job",
          "type": "integer"
        },
        "LaborDetailID": {
          "format": "int32",
          "description": "The LLDetailID of the home labor assignment",
          "type": "integer"
        },
        "DisplayName": {
          "description": "The formatted labor level detail name to display",
          "type": "string"
        },
        "EffectiveDate": {
          "format": "date-time",
          "description": "The effective date of the homes",
          "type": "string"
        },
        "LLDetailID1": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position one",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position two",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position three",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position four",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position five",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position six",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position seven",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position eight",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position nine",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position ten",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "description": "The LLDetailID of the home org at ordinal position eleven",
          "type": "integer"
        },
        "HighestLLOrdinalPosition": {
          "format": "int32",
          "description": "The ordinal position of the highest active LL",
          "type": "integer"
        },
        "IsJCDefined": {
          "description": "Is the JC product defined in the labor levels",
          "type": "boolean"
        }
      }
    },
    "GetLaborLevelNameRequest": {
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "type": "integer"
        },
        "ShiftId": {
          "format": "int32",
          "type": "integer"
        },
        "IsOpenShift": {
          "type": "boolean"
        },
        "StartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "LaborLevelDetailIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ODataResponse[List[GetLaborLevelNameResponse]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetLaborLevelNameResponse"
          }
        }
      }
    },
    "GetLaborLevelNameResponse": {
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "type": "integer"
        },
        "ShiftId": {
          "format": "int32",
          "type": "integer"
        },
        "IsOpenShift": {
          "type": "boolean"
        },
        "LaborLevelHierarchyDisplayNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "JobCostingDisplayName": {
          "type": "string"
        },
        "LaborDistributionDisplayName": {
          "type": "string"
        }
      }
    },
    "LaborLevelValidation": {
      "description": "DTO to hold the collection of shift labor level information for a user",
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "The UserID",
          "type": "integer"
        },
        "ShiftLaborLevelModels": {
          "description": "List of Labor Levels for each shift",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShiftLaborLevelModel"
          }
        }
      }
    },
    "ShiftLaborLevelModel": {
      "description": "The LLDetails for a particular shift, including effective date.\r\nThe isModified is not required when this object is used in the request,\r\nbut is populated in the response object.",
      "type": "object",
      "properties": {
        "ShiftID": {
          "format": "int32",
          "description": "A unique ID for the shift",
          "type": "integer"
        },
        "IsModified": {
          "description": "Set to true if any Labor Levels in the shift were modified",
          "type": "boolean"
        },
        "EffectiveDate": {
          "format": "date-time",
          "description": "The effective date of the Labor Level Details",
          "type": "string"
        },
        "LLDetailName": {
          "description": "The labor level detail name respecting the user preference for LL display",
          "type": "string"
        },
        "ShiftLaborLevels": {
          "$ref": "#/definitions/ShiftLaborLevels",
          "description": "The Labor Level Details IDs"
        }
      }
    },
    "ShiftLaborLevels": {
      "description": "All LLDetail IDs from 1 to 15",
      "type": "object",
      "properties": {
        "LLDetailID1": {
          "format": "int32",
          "description": "LLDetailID 1",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "description": "LLDetailID 2",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "description": "LLDetailID 3",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "description": "LLDetailID 4",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "description": "LLDetailID 5",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "description": "LLDetailID 6",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "description": "LLDetailID 7",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "description": "LLDetailID 8",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "description": "LLDetailID 9",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "description": "LLDetailID 10",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "description": "LLDetailID 11",
          "type": "integer"
        },
        "LLDetailID12": {
          "format": "int32",
          "description": "LLDetailID 12",
          "type": "integer"
        },
        "LLDetailID13": {
          "format": "int32",
          "description": "LLDetailID 13",
          "type": "integer"
        },
        "LLDetailID14": {
          "format": "int32",
          "description": "LLDetailID 14",
          "type": "integer"
        },
        "LLDetailID15": {
          "format": "int32",
          "description": "LLDetailID 15",
          "type": "integer"
        }
      }
    },
    "LaborLevelValidationResponse": {
      "description": "Response object for labor level validation\r\nContains the LaborLevelValidation object in the request (possibly modified)\r\nand a flag to indicate if there were any shifts that had invalid labor levels",
      "type": "object",
      "properties": {
        "HasChanges": {
          "description": "Set to true if any Labor Levels in any shift were modified",
          "type": "boolean"
        },
        "LaborLevelValidation": {
          "$ref": "#/definitions/LaborLevelValidation",
          "description": "Set to true if any Labor Levels in any shift were modified"
        }
      }
    },
    "ODataResponse[List[LaborLevelOrgUnit]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LaborLevelOrgUnit"
          }
        }
      }
    },
    "LaborLevelOrgUnit": {
      "description": "LaborLevelOrgUnit",
      "type": "object",
      "properties": {
        "LaborLevelID": {
          "format": "int32",
          "description": "LaborLevelID",
          "type": "integer"
        },
        "LaborLevelName": {
          "description": "LaborLevelName",
          "type": "string"
        }
      }
    },
    "ODataResponse[List[LaborLevelHierarchy]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LaborLevelHierarchy"
          }
        }
      }
    },
    "LaborLevelHierarchy": {
      "description": "Representation of a Stratustime LLHierarchy returned by the FlexTime Service",
      "type": "object",
      "properties": {
        "LLDetailID": {
          "format": "int32",
          "description": "LLDetailID",
          "type": "integer"
        },
        "DetailCode": {
          "description": "DetailCode",
          "type": "string"
        },
        "DetailName": {
          "description": "LLDetailName",
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/LaborLevelHierarchyParent",
          "description": "parent"
        }
      }
    },
    "LaborLevelHierarchyParent": {
      "description": "Parent object within a LaborLevelHierarchy object",
      "type": "object",
      "properties": {
        "LLDetailID": {
          "format": "int32",
          "description": "LLDetailID",
          "type": "integer"
        }
      }
    },
    "TripStateResponse": {
      "type": "object",
      "properties": {
        "TripState": {
          "format": "int32",
          "type": "integer"
        },
        "MileageCalculationDataID": {
          "format": "int32",
          "type": "integer"
        },
        "StopsRemaining": {
          "format": "int32",
          "type": "integer"
        },
        "LastAddress": {
          "type": "string"
        },
        "StopsAdded": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDistance": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "AddStopResponse": {
      "type": "object",
      "properties": {
        "StopsAdded": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDistance": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "RouteDataRequest": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string"
        },
        "Distance": {
          "format": "decimal",
          "type": "number"
        },
        "Time": {
          "format": "date-time",
          "type": "string"
        },
        "Location": {
          "$ref": "#/definitions/Location"
        },
        "Accuracy": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "lat": {
          "format": "decimal",
          "type": "number"
        },
        "lng": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "ODataResponse[List[PayAdjustmentTypeResponse]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayAdjustmentTypeResponse"
          }
        }
      }
    },
    "PayAdjustmentTypeResponse": {
      "type": "object",
      "properties": {
        "PayAdjustmentID": {
          "format": "int32",
          "type": "integer"
        },
        "PayAdjustmentName": {
          "type": "string"
        }
      }
    },
    "ODataResponse[List[RouteDataResponse]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteDataResponse"
          }
        }
      }
    },
    "RouteDataResponse": {
      "type": "object",
      "properties": {
        "Address": {
          "type": "string"
        },
        "Distance": {
          "format": "decimal",
          "type": "number"
        },
        "Time": {
          "format": "date-time",
          "type": "string"
        },
        "IsStop": {
          "type": "boolean"
        },
        "Location": {
          "$ref": "#/definitions/Location"
        },
        "Accuracy": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "TripDetailsResponse": {
      "type": "object",
      "properties": {
        "MileageCalculationDataID": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDistance": {
          "format": "decimal",
          "type": "number"
        },
        "PayAdjustmentID": {
          "format": "int32",
          "type": "integer"
        },
        "LaborLevelDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "JobCostingDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "LaborDistributionDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "Notes": {
          "type": "string"
        }
      }
    },
    "ODataResponse[List[PayAdjustmentModel]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayAdjustmentModel"
          }
        }
      }
    },
    "PayAdjustmentModel": {
      "type": "object",
      "properties": {
        "PayAdjustmentID": {
          "format": "int32",
          "type": "integer"
        },
        "IsBuyout": {
          "type": "boolean"
        },
        "IsMileageType": {
          "type": "boolean"
        },
        "IncludeRateUnits": {
          "type": "boolean"
        },
        "PayrollUniqueID": {
          "format": "int64",
          "type": "integer"
        },
        "PayAdjustmentType": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "IsDeleted": {
          "type": "boolean"
        },
        "EndDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "StartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "LimitUnitsEnabled": {
          "type": "boolean"
        },
        "IncludeInWAOT": {
          "type": "boolean"
        },
        "UseEmpPayRate": {
          "type": "boolean"
        },
        "OperatorType": {
          "format": "int32",
          "type": "integer"
        },
        "UseFormula": {
          "type": "boolean"
        },
        "UnitLabel": {
          "type": "string"
        },
        "IsDeduction": {
          "type": "boolean"
        },
        "AllowEmpEntry": {
          "type": "boolean"
        },
        "PayAdjustmentCode": {
          "type": "string"
        },
        "PayAdjustmentName": {
          "type": "string"
        },
        "ID": {
          "format": "int32",
          "type": "integer"
        },
        "PayPerUnit": {
          "format": "decimal",
          "type": "number"
        },
        "UnitsLimit": {
          "format": "decimal",
          "type": "number"
        },
        "EmpPayRate": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "ODataResponse[Decimal]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "PayAdjustmentData": {
      "type": "object",
      "properties": {
        "PayAdjustmentDataID": {
          "format": "int32",
          "type": "integer"
        },
        "PayAdjustmentID": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "PayAdjustmentDate": {
          "format": "date-time",
          "type": "string"
        },
        "Unit": {
          "format": "decimal",
          "type": "number"
        },
        "PayPerUnit": {
          "format": "decimal",
          "type": "number"
        },
        "Amount": {
          "format": "decimal",
          "type": "number"
        },
        "Notes": {
          "type": "string"
        },
        "IsModified": {
          "type": "boolean"
        },
        "LLDetailID1": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID12": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID13": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID14": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID15": {
          "format": "int32",
          "type": "integer"
        },
        "MgrApproved": {
          "type": "boolean"
        },
        "EmpApproved": {
          "type": "boolean"
        },
        "ClosedType": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "TimeSlicePreID": {
          "format": "int32",
          "type": "integer"
        },
        "PayAdjustmentDataType": {
          "format": "int32",
          "type": "integer"
        },
        "PayAdjustmentDataSource": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[PayAdjustmentData]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayAdjustmentData"
          }
        }
      }
    },
    "vPayrollPolicy": {
      "type": "object",
      "properties": {
        "CallBackAllowed": {
          "type": "boolean"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "ID": {
          "format": "int32",
          "type": "integer"
        },
        "PayrollPolicyID": {
          "format": "int32",
          "type": "integer"
        },
        "StartDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "EndDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "IsDeleted": {
          "type": "boolean"
        },
        "PayrollPolicyName": {
          "type": "string"
        },
        "WorkWeekStartDay": {
          "format": "int32",
          "type": "integer"
        },
        "PayPeriodType": {
          "format": "int32",
          "type": "integer"
        },
        "PayPeriodSemiMonthlyDay": {
          "format": "int32",
          "type": "integer"
        },
        "PayPeriodMonthlyDay": {
          "format": "int32",
          "type": "integer"
        },
        "GraceMaxSecs": {
          "format": "int32",
          "type": "integer"
        },
        "RoundInBeforeSchedule": {
          "format": "int32",
          "type": "integer"
        },
        "RoundInAfterSchedule": {
          "format": "int32",
          "type": "integer"
        },
        "RoundOutBeforeSchedule": {
          "format": "int32",
          "type": "integer"
        },
        "RoundOutAfterSchedule": {
          "format": "int32",
          "type": "integer"
        },
        "RoundInType": {
          "format": "int32",
          "type": "integer"
        },
        "RoundInTimesTo": {
          "format": "int32",
          "type": "integer"
        },
        "RoundOutType": {
          "format": "int32",
          "type": "integer"
        },
        "RoundOutTimesTo": {
          "format": "int32",
          "type": "integer"
        },
        "RoundTransferType": {
          "format": "int32",
          "type": "integer"
        },
        "RoundTransferTimesTo": {
          "format": "int32",
          "type": "integer"
        },
        "HolEnabled": {
          "type": "boolean"
        },
        "HolPayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "HolMinDaysOfEmployment": {
          "format": "int32",
          "type": "integer"
        },
        "HolSchedToWork": {
          "type": "boolean"
        },
        "HolMustWorkSchedIfCompanyWork": {
          "type": "boolean"
        },
        "HolQualifyOnTimeWorkRequired": {
          "type": "boolean"
        },
        "HolQualifyOnTimeWorkType": {
          "format": "int32",
          "type": "integer"
        },
        "HolQualifyRequiredToWorkType": {
          "format": "int32",
          "type": "integer"
        },
        "HolMinSecsDayBefore": {
          "format": "int32",
          "type": "integer"
        },
        "HolMinSecsDayAfter": {
          "format": "int32",
          "type": "integer"
        },
        "HolApplyOnNextDay": {
          "type": "boolean"
        },
        "HolApplyTowardsOvertime": {
          "type": "boolean"
        },
        "HolUnworkType": {
          "format": "int32",
          "type": "integer"
        },
        "HolUnworkSecsToAdd": {
          "format": "int32",
          "type": "integer"
        },
        "HolUnworkLunchSecsToSubtract": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkType": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkSecsToAdd": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkLunchSecsToSubtract": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkHoursFactorEnabled": {
          "type": "boolean"
        },
        "HolWorkHoursFactor": {
          "format": "decimal",
          "type": "number"
        },
        "LunchType": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundInType": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundInSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundOutType": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundOutSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchDurationRoundingEnabled": {
          "type": "boolean"
        },
        "LunchDurationRoundingType": {
          "format": "int32",
          "type": "integer"
        },
        "LunchDurationRoundingSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundShortDownEnabled": {
          "type": "boolean"
        },
        "LunchRoundShortDownToSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundDownLessThanSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundShortUpEnabled": {
          "type": "boolean"
        },
        "LunchRoundShortUpToSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundShortUpAtLeastSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundLongEnabled": {
          "type": "boolean"
        },
        "LunchRoundLongDownToSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundLongLessThanSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakType": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundInType": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundInSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundOutType": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundOutSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakDurationRoundingEnabled": {
          "type": "boolean"
        },
        "BreakDurationRoundingType": {
          "format": "int32",
          "type": "integer"
        },
        "BreakDurationRoundingSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundShortDownEnabled": {
          "type": "boolean"
        },
        "BreakRoundShortDownToSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundDownLessThanSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundShortUpEnabled": {
          "type": "boolean"
        },
        "BreakRoundShortUpToSecs": {
          "format": "int32",
          "type": "integer"
        },
        "BreakRoundShortUpAtLeastSecs": {
          "format": "int32",
          "type": "integer"
        },
        "CountTimeTowardsType": {
          "format": "int32",
          "type": "integer"
        },
        "RejectDuplicatePunchWithinSecs": {
          "format": "int32",
          "type": "integer"
        },
        "RejectOpposingPunchWithinSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MaxShiftLengthSecs": {
          "format": "int32",
          "type": "integer"
        },
        "NineEightyRuleEnabled": {
          "type": "boolean"
        },
        "WorkDaySplitAt": {
          "format": "date-time",
          "type": "string"
        },
        "UseBlendedRateEnabled": {
          "type": "boolean"
        },
        "HolUnworkWeeksCountForAvgSched": {
          "format": "int32",
          "type": "integer"
        },
        "HolUnworkWeeksCountForAvgWork": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkWeeksCountForAvgSched": {
          "format": "int32",
          "type": "integer"
        },
        "HolWorkWeeksCountForAvgWork": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundAdditionalEnabled": {
          "type": "boolean"
        },
        "LunchRoundAdditionalSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LunchRoundAdditionalPayType": {
          "format": "int32",
          "type": "integer"
        },
        "AllowManLunchOverride": {
          "type": "boolean"
        },
        "AllowManBreakOverride": {
          "type": "boolean"
        },
        "PaidLunchShiftDiffEnabled": {
          "type": "boolean"
        },
        "PaidBreakShiftDiffEnabled": {
          "type": "boolean"
        },
        "DefaultShiftLengthSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MissingPunchBufferSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SwipeNGoMealEnabled": {
          "type": "boolean"
        },
        "SwipeNGoMealWindowSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SwipeNGoBreakEnabled": {
          "type": "boolean"
        },
        "SwipeNGoBreakWindowSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SwipeNGoTransferEnabled": {
          "type": "boolean"
        },
        "SwipeNGoTransferWindowSecs": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "DaySplitEnabled": {
          "type": "boolean"
        },
        "MealPremWorkEnabled": {
          "type": "boolean"
        },
        "MealPremWorkSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremWorkAllowedSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremWorkAllowedPayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremWorkMinWorkSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremPunchEnabled": {
          "type": "boolean"
        },
        "MealPremPunchSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremPunchType": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremPunchAllowedSecs": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremPunchAllowedPayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "CustomPayPeriodDateType": {
          "format": "int32",
          "type": "integer"
        },
        "PopulateScheduledTransactions": {
          "type": "boolean"
        },
        "PopulateScheduledTransfers": {
          "type": "boolean"
        },
        "PopulateScheduledMeals": {
          "type": "boolean"
        },
        "PopulateScheduledBreaks": {
          "type": "boolean"
        },
        "PopulateScheduledOverride": {
          "type": "boolean"
        },
        "PopulateScheduledOverrideSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SpreadOfHoursPayEnabled": {
          "type": "boolean"
        },
        "SpreadOfHoursPaySecs": {
          "format": "int32",
          "type": "integer"
        },
        "SpreadOfHoursPayAmount": {
          "format": "decimal",
          "type": "number"
        },
        "SpreadOfHoursPayPunchTimeType": {
          "format": "int32",
          "type": "integer"
        },
        "RoundNonWorkDurationType": {
          "format": "int32",
          "type": "integer"
        },
        "RoundNonWorkDurationTimesTo": {
          "format": "int32",
          "type": "integer"
        },
        "AllowTORReplaceTimeSheets": {
          "type": "boolean"
        },
        "AllowTORReplacePartTimeSheets": {
          "type": "boolean"
        },
        "LLOverrideRateAsHourlyForSalaryEmp": {
          "type": "boolean"
        },
        "SecondMealPremPunchEnabled": {
          "type": "boolean"
        },
        "SecondMealPremPunchSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SecondMealPremPunchType": {
          "format": "int32",
          "type": "integer"
        },
        "SecondMealPremPunchAllowSecs": {
          "format": "int32",
          "type": "integer"
        },
        "SecondMealPremAllowedPayType": {
          "format": "int32",
          "type": "integer"
        },
        "SecondMealPremPunchMinWorkSec": {
          "format": "int32",
          "type": "integer"
        },
        "MealPremDefaultLLType": {
          "format": "int32",
          "type": "integer"
        },
        "LunchAllowed": {
          "type": "boolean"
        },
        "BreakAllowed": {
          "type": "boolean"
        },
        "DisplayDaySplitDayEnabled": {
          "type": "boolean"
        },
        "DisplayDaySplitDay": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[PayTypeModel]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayTypeModel"
          }
        }
      }
    },
    "PayTypeModel": {
      "description": "A simple representation of the PayType",
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "type": "integer"
        },
        "PayTypeID": {
          "format": "int32",
          "description": "The id of the pay type",
          "type": "integer"
        },
        "StartDateTime": {
          "format": "date-time",
          "description": "when the pay type starts",
          "type": "string"
        },
        "EndDateTime": {
          "format": "date-time",
          "description": "When the pay type ends",
          "type": "string"
        },
        "IsDeleted": {
          "description": "Whether or not the record is deleted",
          "type": "boolean"
        },
        "PayTypeName": {
          "type": "string"
        },
        "PayTypeCode": {
          "type": "string"
        },
        "CountTowardsHolidayMin": {
          "type": "boolean"
        },
        "OverridesAbsence": {
          "type": "boolean"
        },
        "IsWorkType": {
          "type": "boolean"
        },
        "ApplyToOvertime": {
          "type": "boolean"
        },
        "IncludeInBlendedRate": {
          "type": "boolean"
        },
        "ApplyToTimeOff": {
          "type": "boolean"
        },
        "CanBeOvertime": {
          "type": "boolean"
        },
        "DefaultPayLevelRateType": {
          "format": "int32",
          "type": "integer"
        },
        "IsOvertimeType": {
          "type": "boolean"
        },
        "OvertimeFactor": {
          "format": "decimal",
          "type": "number"
        },
        "ColorCode": {
          "type": "string"
        },
        "AllowShiftDiff": {
          "type": "boolean"
        },
        "DeductFromPayType": {
          "type": "boolean"
        },
        "DeductFromPayTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "IsDurationOnly": {
          "type": "boolean"
        },
        "IsLLRequired": {
          "type": "boolean"
        },
        "IsFMLAType": {
          "type": "boolean"
        }
      }
    },
    "PunchPromptEmpAnswer": {
      "type": "object",
      "properties": {
        "PunchPromptEmpAnswerID": {
          "format": "int32",
          "type": "integer"
        },
        "TimeSlicePreID": {
          "format": "int32",
          "type": "integer"
        },
        "PunchPromptQuestionID": {
          "format": "int32",
          "type": "integer"
        },
        "PunchPromptDefinedAnswerID": {
          "format": "int32",
          "type": "integer"
        },
        "AnswerData": {
          "type": "string"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "vStatusBoard": {
      "type": "object",
      "properties": {
        "nextTransactionType": {
          "format": "int32",
          "type": "integer"
        },
        "StatusBoardID": {
          "format": "int32",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "StatusType": {
          "format": "int32",
          "type": "integer"
        },
        "TransactionType": {
          "format": "int32",
          "type": "integer"
        },
        "EmpNote": {
          "type": "string"
        },
        "TransactionDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "TransactionUTCDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "LLDetailID1": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID12": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID13": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID14": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailID15": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduleID": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID1": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID2": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID3": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID4": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID5": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID6": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID7": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID8": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID9": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID10": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID11": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID12": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID13": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID14": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLLDetailID15": {
          "format": "int32",
          "type": "integer"
        },
        "CurrentLaborLevelDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduledLaborLevelDetailID": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "EmpStatus": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Punch": {
      "description": "A simple representation of a punch",
      "type": "object",
      "properties": {
        "TransactionLocalDateTime": {
          "description": "The date and time for the punch expressed in the time zone\r\nof the EE who owns the punch (UserInfo.TimeZoneKey)",
          "type": "string"
        },
        "TransactionType": {
          "format": "int32",
          "description": "TransactionType",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            14,
            15
          ],
          "type": "integer"
        },
        "EmployeeNote": {
          "description": "EmployeeNote",
          "type": "string"
        },
        "LaborLevelDetailID": {
          "format": "int32",
          "description": "LaborLevelDetailID",
          "type": "integer"
        },
        "JobCostingDetailID": {
          "format": "int32",
          "description": "JobCostingDetailID",
          "type": "integer"
        },
        "LaborDistributionDetailID": {
          "format": "int32",
          "description": "LaborDistributionDetailID",
          "type": "integer"
        },
        "LocationCoordinates": {
          "description": "LocationCoordinates",
          "type": "string"
        },
        "TimeSliceGroupID": {
          "description": "TimeSliceGroupID",
          "type": "string"
        }
      }
    },
    "GenerateReportInQueueResponse": {
      "description": "A response object used on the return from the AddCompTimeRequestAsync method",
      "type": "object",
      "properties": {
        "ReportSettingId": {
          "format": "int32",
          "description": "The Id of the newly created report setting record",
          "type": "integer"
        },
        "ErrorCode": {
          "description": "An error code if not successful",
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "description": "Whether the submit was successful or not",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[StatusBoardSummaryModel]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusBoardSummaryModel"
          }
        }
      }
    },
    "StatusBoardSummaryModel": {
      "type": "object",
      "properties": {
        "StatusTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "StatusTypeCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "StatusBoardResponse": {
      "description": "Model to display Employee details on StatusBoard. It is a subset of vStatusBoard",
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "UserID",
          "type": "integer"
        },
        "FirstName": {
          "description": "FirstName",
          "type": "string"
        },
        "LastName": {
          "description": "LastName",
          "type": "string"
        },
        "StatusType": {
          "format": "int32",
          "description": "StatusType",
          "type": "integer"
        },
        "EmpNote": {
          "description": "EmployeeNote",
          "type": "string"
        },
        "TransactionDateTime": {
          "format": "date-time",
          "description": "TransactionDateTime",
          "type": "string"
        },
        "LLDetailID1": {
          "format": "int32",
          "description": "LLDetailID1",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "description": "LLDetailID2",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "description": "LLDetailID3",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "description": "LLDetailID4",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "description": "LLDetailID5",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "description": "LLDetailID6",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "description": "LLDetailID7",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "description": "LLDetailID8",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "description": "LLDetailID9",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "description": "LLDetailID10",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "description": "LLDetailID11",
          "type": "integer"
        },
        "LLDetailID12": {
          "format": "int32",
          "description": "LLDetailID12",
          "type": "integer"
        },
        "LLDetailID13": {
          "format": "int32",
          "description": "LLDetailID13",
          "type": "integer"
        },
        "LLDetailID14": {
          "format": "int32",
          "description": "LLDetailID14",
          "type": "integer"
        },
        "LLDetailID15": {
          "format": "int32",
          "description": "LLDetailID15",
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[KeyValuePair[Int32,String]]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair[Int32,String]"
          }
        }
      }
    },
    "KeyValuePair[Int32,String]": {
      "type": "object",
      "properties": {
        "key": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ODataResponse[List[TimeCardModel]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeCardModel"
          }
        }
      }
    },
    "TimeCardModel": {
      "description": "A representation of an employee's time card",
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "The UserID",
          "type": "integer"
        },
        "RangeStartDate": {
          "format": "date-time",
          "description": "The start of the date range which will appear on the time card",
          "type": "string"
        },
        "RangeEndDate": {
          "format": "date-time",
          "description": "The end of the date range which will appear on the time card",
          "type": "string"
        },
        "TimeCardShifts": {
          "description": "The shifts which will appear on the time card",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shift"
          }
        },
        "PayAdjustments": {
          "description": "All Pay adjustments within date range",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayAdjust"
          }
        }
      }
    },
    "Shift": {
      "description": "Class to hold shifts and daily aggregates.  We may want to refactor\r\nthese in the future to be separate classes.",
      "type": "object",
      "properties": {
        "TimeSlicePostID": {
          "format": "int32",
          "description": "The TimeSlicePostID",
          "type": "integer"
        },
        "TimeSlicePreIDIn": {
          "format": "int32",
          "description": "The TimeSlicePreID of the in punch",
          "type": "integer"
        },
        "TimeSlicePreIDOut": {
          "format": "int32",
          "description": "The TimeSlicePreID of the out punch",
          "type": "integer"
        },
        "ApplyToDate": {
          "format": "date-time",
          "description": "The date the shift applies to",
          "type": "string"
        },
        "PayTypeID": {
          "format": "int32",
          "description": "The ID of paytype",
          "type": "integer"
        },
        "PayTypeName": {
          "description": "The Name of paytype",
          "type": "string"
        },
        "RoundedDateTimeIn": {
          "format": "date-time",
          "description": "The time the user punched in",
          "type": "string"
        },
        "RoundedDateTimeOut": {
          "format": "date-time",
          "description": "The time the user punched out",
          "type": "string"
        },
        "SuggestedDateTimeIn": {
          "format": "date-time",
          "description": "The time the user might have punched in (for Missing punches)",
          "type": "string"
        },
        "SuggestedDateTimeOut": {
          "format": "date-time",
          "description": "The time the user might have punched out  (for Missing punches)",
          "type": "string"
        },
        "LLDetailID1": {
          "format": "int32",
          "description": "All of the labor level detail IDs associated with the shift.\r\nLevel 12 and 13 were omitted because they can never be populated \r\nfor integrated clients.  The maximum number of orgs in CA is 10.\r\nWith C2C we would add one additional level, so 11 is possible.\r\n14 is reserved for Job Costing, and 15 for Labor Distribution.",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "description": "LLDetailID2",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "description": "LLDetailID3",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "description": "LLDetailID4",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "description": "LLDetailID5",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "description": "LLDetailID6",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "description": "LLDetailID7",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "description": "LLDetailID8",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "description": "LLDetailID9",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "description": "LLDetailID10",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "description": "LLDetailID11",
          "type": "integer"
        },
        "JCDetailID": {
          "format": "int32",
          "description": "JCDetailID",
          "type": "integer"
        },
        "LDDetailID": {
          "format": "int32",
          "description": "LDDetailID",
          "type": "integer"
        },
        "OrgUnitName": {
          "description": "The org unit to display in the timecard",
          "type": "string"
        },
        "OrgUnitHierarchyDisplay": {
          "description": "The org unit to display including all ancestors\r\nin the org hierarchy",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "JobName": {
          "description": "The org unit to display in the timecard",
          "type": "string"
        },
        "LaborAssignmentName": {
          "description": "The org unit to display in the timecard",
          "type": "string"
        },
        "EmpApprovedShift": {
          "description": "True if the employee approved both the punch in and out for this shift",
          "type": "boolean"
        },
        "IsWorkType": {
          "description": "True if this shift was work, false if this was nonwork",
          "type": "boolean"
        },
        "ShiftRegularSecs": {
          "format": "int32",
          "description": "The amount of seconds worked or used on non-work",
          "type": "integer"
        },
        "ShiftOTSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to overtime for this shift",
          "type": "integer"
        },
        "ShiftUnpaidSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to unpaid time for this shift",
          "type": "integer"
        },
        "ShiftNonWorkSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to non-work time for this shift",
          "type": "integer"
        },
        "OvertimeDetails": {
          "description": "Collection of details about the overtime for this shift, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OvertimeDetail"
          }
        },
        "MissingPunchTypeIn": {
          "format": "int32",
          "description": "If the in punch is considered missing this will have a non-zero value.\r\nThe associated enum may be found in the main stratustime solution.",
          "type": "integer"
        },
        "MissingPunchTypeOut": {
          "format": "int32",
          "description": "If the out punch is considered missing this will have a non-zero value.\r\nThe associated enum may be found in the main stratustime solution.",
          "type": "integer"
        },
        "ActualDateTimeIn": {
          "format": "date-time",
          "description": "The actual time the user punched in",
          "type": "string"
        },
        "ActualDateTimeOut": {
          "format": "date-time",
          "description": "The actual time the user punched out",
          "type": "string"
        },
        "EmpNoteIn": {
          "description": "The employee note on the punch in",
          "type": "string"
        },
        "TransactionSourceIn": {
          "format": "int32",
          "description": "Source of the in punch. For system generated punches like automatic meal or day-split\r\nthis will be zero (TimeCardEngine source)",
          "type": "integer"
        },
        "TransactionSourceOut": {
          "format": "int32",
          "description": "Source of the out punch. For system generated punches like automatic meal or day-split\r\nthis will be zero (TimeCardEngine source)",
          "type": "integer"
        },
        "TimeSheetSubmissionIn": {
          "description": "Indicates that the in punch was submitted via the time sheet",
          "type": "boolean"
        },
        "TimeSheetSubmissionOut": {
          "description": "Indicates that the out punch was submitted via the time sheet",
          "type": "boolean"
        },
        "ClosedType": {
          "format": "int32",
          "description": "Indicates the closed type of the shift (closed, locked, etc.)",
          "type": "integer"
        },
        "IsCallBack": {
          "description": "Indicates the shift was created by a call back",
          "type": "boolean"
        },
        "MgrApprovedShift": {
          "description": "Indicates the shift has at least one punch which is manager\r\napproved (manager1, manager2, or admin)",
          "type": "boolean"
        },
        "PayLevelRateType": {
          "format": "int32",
          "description": "The ID of paytype",
          "type": "integer"
        },
        "PayLevelRateTypeName": {
          "description": "The Name of paytype",
          "type": "string"
        },
        "IsAutoMealOrBreak": {
          "description": "Whether the shift is an auto meal or break",
          "type": "boolean"
        },
        "EmpApprovedDay": {
          "description": "True if the employee approved both the punch in and out for all shifts on this day",
          "type": "boolean"
        },
        "MgrApprovedDay": {
          "description": "True if a manager approved both the punch in and out for all shifts on this day",
          "type": "boolean"
        },
        "DailyRegularSecs": {
          "format": "int32",
          "description": "The amount of seconds worked or used on non-work for this day",
          "type": "integer"
        },
        "DailyOTSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to overtime for this day",
          "type": "integer"
        },
        "DailyUnpaidSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to unpaid time for this day",
          "type": "integer"
        },
        "DailyNonWorkSecs": {
          "format": "int32",
          "description": "The amount of seconds that applied to non-work time for this shift",
          "type": "integer"
        },
        "NumberOfShiftsOnDay": {
          "format": "int32",
          "description": "Count of shifts on this day",
          "type": "integer"
        },
        "IsFirstShiftOfDay": {
          "description": "Determines if this was the first shift of the day",
          "type": "boolean"
        }
      }
    },
    "PayAdjust": {
      "description": "Pay Adjustment Data inner class\r\nLists all pay adjustments within date range, in order",
      "type": "object",
      "properties": {
        "PayAdjustmentDataID": {
          "format": "int32",
          "description": "Unique ID for the adjustment data",
          "type": "integer"
        },
        "PayAdjustmentID": {
          "format": "int32",
          "description": "ID of pay adjustment type",
          "type": "integer"
        },
        "PayAdjustmentDate": {
          "format": "date-time",
          "description": "Date of adjustment (no time component)",
          "type": "string"
        },
        "Notes": {
          "description": "Pay Adjustment Note",
          "type": "string"
        },
        "Amount": {
          "format": "decimal",
          "description": "Dollar amount of adjustment",
          "type": "number"
        }
      }
    },
    "OvertimeDetail": {
      "description": "Small inner-class to hold OTNames and durations for a shift.\r\nThe aggregate of all OT is found in the ShiftOTSecs property, \r\nthis class provides a breakdown of that total",
      "type": "object",
      "properties": {
        "OTName": {
          "description": "PayTypeName of overtime",
          "type": "string"
        },
        "OTSecs": {
          "format": "int32",
          "description": "Duration in seconds of overtime",
          "type": "integer"
        }
      }
    },
    "ODataResponse[List[TimeCardNotes]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeCardNotes"
          }
        }
      }
    },
    "TimeCardNotes": {
      "description": "Class to hold shift employee and manager notes",
      "type": "object",
      "properties": {
        "TimeSlicePostID": {
          "format": "int32",
          "description": "The TimeSlicePostID",
          "type": "integer"
        },
        "ApplyToDate": {
          "format": "date-time",
          "description": "The date the shift applies to",
          "type": "string"
        },
        "EmployeeNoteIn": {
          "description": "EmpNoteIn",
          "type": "string"
        },
        "EmployeeNoteOut": {
          "description": "EmpNoteOut",
          "type": "string"
        },
        "ManagerNoteIn": {
          "description": "MgrNoteIn",
          "type": "string"
        },
        "ManagerNoteOut": {
          "description": "MgrNoteOut",
          "type": "string"
        }
      }
    },
    "TimeSheetDetails": {
      "description": "The model of the row for the submission of individual rows of the timesheet",
      "type": "object",
      "properties": {
        "Type": {
          "format": "int32",
          "description": "The Pay Type of the TimeSheetDetail row",
          "type": "integer"
        },
        "Date": {
          "description": "The string representation of the date",
          "type": "string"
        },
        "StartTime": {
          "description": "The string representation of the start time",
          "type": "string"
        },
        "EndTime": {
          "description": "The string representation of the start time",
          "type": "string"
        },
        "Hours": {
          "description": "The (optional) hours of the punch",
          "type": "string"
        },
        "LLDetailID1": {
          "format": "int32",
          "description": "LLDetailID 1",
          "type": "integer"
        },
        "LLDetailID2": {
          "format": "int32",
          "description": "LLDetailID 2",
          "type": "integer"
        },
        "LLDetailID3": {
          "format": "int32",
          "description": "LLDetailID 3",
          "type": "integer"
        },
        "LLDetailID4": {
          "format": "int32",
          "description": "LLDetailID 4",
          "type": "integer"
        },
        "LLDetailID5": {
          "format": "int32",
          "description": "LLDetailID 5",
          "type": "integer"
        },
        "LLDetailID6": {
          "format": "int32",
          "description": "LLDetailID 6",
          "type": "integer"
        },
        "LLDetailID7": {
          "format": "int32",
          "description": "LLDetailID 7",
          "type": "integer"
        },
        "LLDetailID8": {
          "format": "int32",
          "description": "LLDetailID 8",
          "type": "integer"
        },
        "LLDetailID9": {
          "format": "int32",
          "description": "LLDetailID 9",
          "type": "integer"
        },
        "LLDetailID10": {
          "format": "int32",
          "description": "LLDetailID 10",
          "type": "integer"
        },
        "LLDetailID11": {
          "format": "int32",
          "description": "LLDetailID 11",
          "type": "integer"
        },
        "LLDetailID12": {
          "format": "int32",
          "description": "LLDetailID 12",
          "type": "integer"
        },
        "LLDetailID13": {
          "format": "int32",
          "description": "LLDetailID 13",
          "type": "integer"
        },
        "LLDetailID14": {
          "format": "int32",
          "description": "LLDetailID 14",
          "type": "integer"
        },
        "LLDetailID15": {
          "format": "int32",
          "description": "LLDetailID 15",
          "type": "integer"
        },
        "Notes": {
          "description": "The note for the shift",
          "type": "string"
        },
        "TimeSlicePreIDIn": {
          "description": "The timeSlicePreIDIn of the shift, will be not set for new shift",
          "type": "string"
        },
        "TimeSlicePreIDOut": {
          "description": "The timeSlicePreIDOut of the shift, will be not set for new shift",
          "type": "string"
        },
        "isDeleted": {
          "description": "Is this a deleted row",
          "type": "boolean"
        },
        "isModified": {
          "description": "Is this row modified (to distinguish from a new row.",
          "type": "boolean"
        },
        "isInMissingPunch": {
          "description": "Is this row has a missing punch added for in punch",
          "type": "boolean"
        },
        "isOutMissingPunch": {
          "description": "Is this row has a missing punch added for out punch",
          "type": "boolean"
        }
      }
    },
    "SubmitTimeSheetResponse": {
      "description": "A response object used on the return from the submit timesheet method",
      "type": "object",
      "properties": {
        "Success": {
          "description": "Whether the submit was successful or not",
          "type": "boolean"
        },
        "ErrorCode": {
          "description": "An error code if not successful",
          "type": "string"
        },
        "ErrorCodes": {
          "description": "The list of Errors, this is the preferred location for errors, it will replace ErrorCode in the future.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RejectedNonWorkTypes": {
          "description": "A list of non-work Pay Types that were unable to be saved, null otherwise\r\nThis is returned when an hours balance limit is exceeded",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "EmpIdentifier": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "Phone1": {
          "type": "string"
        },
        "Phone2": {
          "type": "string"
        },
        "Phone3": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Badge": {
          "type": "string"
        },
        "WebLogin": {
          "type": "string"
        },
        "WebPassword": {
          "type": "string"
        },
        "PasswordPolicyID": {
          "format": "int32",
          "type": "integer"
        },
        "PasswordExpires": {
          "format": "date-time",
          "type": "string"
        },
        "GovernmentID": {
          "type": "string"
        },
        "RestrictToScheduleEnabled": {
          "type": "boolean"
        },
        "RestrictShortLunchEnabled": {
          "type": "boolean"
        },
        "WebAccessEnabled": {
          "type": "boolean"
        },
        "WebPunchingEnabled": {
          "type": "boolean"
        },
        "TimeSheetSubmitEnabled": {
          "type": "boolean"
        },
        "WorkTimeSheetSubmitEnabled": {
          "type": "boolean"
        },
        "NonWorkTimeSheetSubmitEnabled": {
          "type": "boolean"
        },
        "DefaultClockIn": {
          "format": "date-time",
          "type": "string"
        },
        "TimeSheetDefaultPaid": {
          "type": "boolean"
        },
        "TimeZoneKey": {
          "type": "string"
        },
        "TrackAttendanceOnlyEnabled": {
          "type": "boolean"
        },
        "AttendanceShiftLength": {
          "format": "int32",
          "type": "integer"
        },
        "PasswordAttempts": {
          "format": "int32",
          "type": "integer"
        },
        "LastLockedOut": {
          "format": "date-time",
          "type": "string"
        },
        "IPAccessPolicyID": {
          "format": "int32",
          "type": "integer"
        },
        "TimeOffStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "PreferenceID": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "IsTopMostMgr": {
          "type": "boolean"
        },
        "AdditionalMonthsOfService": {
          "format": "int32",
          "type": "integer"
        },
        "ResetPasswordLink": {
          "type": "string"
        },
        "ResetPasswordLinkGeneratedOn": {
          "format": "date-time",
          "type": "string"
        },
        "SessionState": {
          "type": "string"
        },
        "TimeCardLockedThru": {
          "format": "date-time",
          "type": "string"
        },
        "TimeCardClosedThru": {
          "format": "date-time",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "AlertEmail": {
          "type": "string"
        },
        "QualForAccrualsByHrsWorked": {
          "type": "boolean"
        },
        "Minutiae1": {
          "format": "byte",
          "type": "string"
        },
        "Minutiae2": {
          "format": "byte",
          "type": "string"
        },
        "SpecialMinutiae": {
          "type": "boolean"
        },
        "HandTemplate": {
          "format": "byte",
          "type": "string"
        },
        "MobileWebPunchEnabled": {
          "type": "boolean"
        },
        "EnforceIPAccessOnMobileWeb": {
          "type": "boolean"
        },
        "TrackGeolocation": {
          "type": "boolean"
        },
        "DisablePunchWithoutGeolocation": {
          "type": "boolean"
        },
        "SSOLoginOnly": {
          "type": "boolean"
        },
        "TelepunchPin": {
          "type": "string"
        },
        "WebKioskPunchEnabled": {
          "type": "boolean"
        },
        "CreatedOn": {
          "format": "date-time",
          "type": "string"
        },
        "CreatedBy": {
          "format": "int32",
          "type": "integer"
        },
        "ClientID": {
          "type": "string"
        },
        "Phone1Ext": {
          "type": "string"
        },
        "PayrollEmployeeID": {
          "format": "int64",
          "type": "integer"
        },
        "EmployeeType": {
          "format": "int32",
          "type": "integer"
        },
        "Phone2Ext": {
          "type": "string"
        },
        "HomeEmail": {
          "type": "string"
        },
        "AutoDistribution": {
          "type": "boolean"
        },
        "PayrollStandardHours": {
          "format": "decimal",
          "type": "number"
        },
        "EmployeeClassification": {
          "format": "int32",
          "type": "integer"
        },
        "AllowMobTimeSheetSubmit": {
          "type": "boolean"
        },
        "AllowMobWorkTimeSheetSubmit": {
          "type": "boolean"
        },
        "AllowMobNonWorkTimeSheetSubmit": {
          "type": "boolean"
        },
        "MobTimeSheetDefaultPaid": {
          "type": "boolean"
        },
        "WEID": {
          "type": "string"
        },
        "PEID": {
          "type": "string"
        },
        "PNGSSOUserGUID": {
          "type": "string"
        },
        "ScheduledHours": {
          "format": "decimal",
          "type": "number"
        },
        "AllowMobilePunching": {
          "type": "boolean"
        },
        "IsSharedWorker": {
          "type": "boolean"
        },
        "IsHomeUpdatePrevented": {
          "type": "boolean"
        },
        "PngUserName": {
          "type": "string"
        },
        "Minutiae3": {
          "format": "byte",
          "type": "string"
        },
        "IrisMinutiae": {
          "format": "byte",
          "type": "string"
        },
        "EnrolledEyeType": {
          "format": "int32",
          "type": "integer"
        },
        "FaceMinutiae": {
          "format": "byte",
          "type": "string"
        },
        "FaceMinutiaeLastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "FaceMinutiaeUserAcknowledgement": {
          "type": "boolean"
        },
        "IsAcknowldgeBiometricVerification": {
          "type": "boolean"
        },
        "BiometricVerificationDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "BiometricDataDeleteDate": {
          "format": "date-time",
          "type": "string"
        },
        "IrisFaceMinutiae": {
          "format": "byte",
          "type": "string"
        },
        "IrisFaceMinutiaeLastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "ManagerApprovalRole": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "vUserPreference": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "type": "integer"
        },
        "PNGSSOUserGUID": {
          "type": "string"
        },
        "PreferenceID": {
          "format": "int32",
          "type": "integer"
        },
        "PreferenceName": {
          "type": "string"
        },
        "PreferenceCode": {
          "type": "string"
        },
        "DefaultThemeType": {
          "format": "int32",
          "type": "integer"
        },
        "FullNameType": {
          "format": "int32",
          "type": "integer"
        },
        "DateFormatType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeFormatType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeDurationType": {
          "format": "int32",
          "type": "integer"
        },
        "SessionTimeoutSecs": {
          "format": "int32",
          "type": "integer"
        },
        "LLDetailDisplayType": {
          "format": "int32",
          "type": "integer"
        },
        "AllowPreferenceOverride": {
          "type": "boolean"
        },
        "AllowViewStatusBoard": {
          "type": "boolean"
        },
        "StatusBoardEmpDisplayType": {
          "format": "int32",
          "type": "integer"
        },
        "StatusBoardNotesEnabled": {
          "type": "boolean"
        },
        "StatusBoardPunchTimeEnabled": {
          "type": "boolean"
        },
        "ReadMessageButtonEnabled": {
          "type": "boolean"
        },
        "DefaultToClockOutAfterClockIn": {
          "type": "boolean"
        },
        "AllowChangePassword": {
          "type": "boolean"
        },
        "AllowMgrApprovedPunchEdit": {
          "type": "boolean"
        },
        "ReplaceSchedTimesheetWithTOR": {
          "type": "boolean"
        },
        "ApplyScheduledLLsSecs": {
          "format": "int32",
          "type": "integer"
        },
        "RestrictToScheduleSecs": {
          "format": "int32",
          "type": "integer"
        },
        "ActionEnabled": {
          "type": "boolean"
        },
        "ActionPunchEnabled": {
          "type": "boolean"
        },
        "ActionTimesheetEntryEnabled": {
          "type": "boolean"
        },
        "ActionTimesheetEntryFormatType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionTimesheetEntryType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionTimesheetHasRegOTEntry": {
          "type": "boolean"
        },
        "ActionPeriodEntryEnabled": {
          "type": "boolean"
        },
        "ActionPeriodEntryHasCopyFormat": {
          "type": "boolean"
        },
        "ActionPeriodEntryType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionPeriodHasRegOTEntry": {
          "type": "boolean"
        },
        "ActionTempEntryEnabled": {
          "type": "boolean"
        },
        "ActionTempEntryCopyFormat": {
          "type": "boolean"
        },
        "ActionTempEntryType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionTempHasRegOTEntry": {
          "type": "boolean"
        },
        "ActionTempHasEmpEdit": {
          "type": "boolean"
        },
        "ActionTempPopulateFromSchedule": {
          "type": "boolean"
        },
        "ActionTimesheetEntryLimitTypes": {
          "type": "boolean"
        },
        "ActionPeriodEntryLimitTypes": {
          "type": "boolean"
        },
        "ActionTempEntryLimitTypes": {
          "type": "boolean"
        },
        "ScheduleEnabled": {
          "type": "boolean"
        },
        "ScheduleDefaultViewType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeOffEnabled": {
          "type": "boolean"
        },
        "TOREnabled": {
          "type": "boolean"
        },
        "AllowViewTORCalender": {
          "type": "boolean"
        },
        "TORCalenderEmpGroupType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardEnabled": {
          "type": "boolean"
        },
        "TimeCardApprovalsEnabled": {
          "type": "boolean"
        },
        "TimeCardDefaultPeriodType": {
          "format": "int32",
          "type": "integer"
        },
        "ReportsEnabled": {
          "type": "boolean"
        },
        "EmpInfoModalDisabled": {
          "type": "boolean"
        },
        "DisplayMissingPunchesScreen": {
          "type": "boolean"
        },
        "EmpLinkToViewType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoEnabled": {
          "type": "boolean"
        },
        "TimeCardInfoRow1Column2Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column2Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column3Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column3Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column4Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column4Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column5Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow1Column5Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column1Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column1Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column2Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column2Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column3Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column3Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column4Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column4Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column5Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow2Column5Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column1Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column1Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column2Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column2Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column3Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column3Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column4Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column4Value": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column5Type": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardInfoRow3Column5Value": {
          "format": "int32",
          "type": "integer"
        },
        "MgrInfoModalDisabled": {
          "type": "boolean"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "ModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "ModifiedBy": {
          "format": "int32",
          "type": "integer"
        },
        "DisplayExceptionsScreen": {
          "type": "boolean"
        },
        "ActionPostShiftTransferEnabled": {
          "type": "boolean"
        },
        "AllowViewEmpNamesOnTORCalender": {
          "type": "boolean"
        },
        "TimeCardSummaryViewEnabled": {
          "type": "boolean"
        },
        "HideTransferOnEmpDash": {
          "type": "boolean"
        },
        "ActionTimesheetExpressEnabled": {
          "type": "boolean"
        },
        "ActionDefaultDateRangeType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionExpressEntryFormatType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionExpressEntryType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionExpressHasRegOTEntry": {
          "type": "boolean"
        },
        "ActionExpressEntryLimitTypes": {
          "type": "boolean"
        },
        "ActionExpressHasCopyFormat": {
          "type": "boolean"
        },
        "OnScreenWalkthroughEnabled": {
          "type": "boolean"
        },
        "TimeCardMessageEnabled": {
          "type": "boolean"
        },
        "TimeCardMessage": {
          "type": "string"
        },
        "TimeCardMessageButtonText": {
          "type": "string"
        },
        "TimeCardApprovalMessageEnabled": {
          "type": "boolean"
        },
        "TimeCardApprovalMessage": {
          "type": "string"
        },
        "AllowViewHolidayOnTORCalender": {
          "type": "boolean"
        },
        "TORCalendarSettingID": {
          "format": "int32",
          "type": "integer"
        },
        "AssignProxyMgrEnabled": {
          "type": "boolean"
        },
        "CompactModeEnabled": {
          "type": "boolean"
        },
        "LLAutoCompleteEnabled": {
          "type": "boolean"
        },
        "DefaultToSchedule": {
          "type": "boolean"
        },
        "AllowArbitaryLLs": {
          "type": "boolean"
        },
        "EmailForMessageDisabled": {
          "type": "boolean"
        },
        "TimeCardOTDetailsEnabled": {
          "type": "boolean"
        },
        "HideUnpaidHours": {
          "type": "boolean"
        },
        "TimeCardShiftDiffDetailEnabled": {
          "type": "boolean"
        },
        "ActionEnablePercentLLTimeEntry": {
          "type": "boolean"
        },
        "StatusBoardViewAllEmpEnabled": {
          "type": "boolean"
        },
        "ExpandAllTimeCardsByDefault": {
          "type": "boolean"
        },
        "PunchLLPromptEnabled": {
          "type": "boolean"
        },
        "ClockInLLPromptEnabled": {
          "type": "boolean"
        },
        "StartMealLLPromptEnabled": {
          "type": "boolean"
        },
        "StartBreakLLPromptEnabled": {
          "type": "boolean"
        },
        "EndMealLLPromptEnabled": {
          "type": "boolean"
        },
        "EndBreakLLPromptEnabled": {
          "type": "boolean"
        },
        "TransferLLPromptEnabled": {
          "type": "boolean"
        },
        "CurrencyLabel": {
          "type": "string"
        },
        "EmailLanguagePreference": {
          "type": "string"
        },
        "ArbitraryLaborLevelOffset": {
          "format": "int32",
          "type": "integer"
        },
        "EmpHomePayAdjustmentsLabel": {
          "type": "string"
        },
        "DefaultMobileHomeViewType": {
          "format": "int32",
          "type": "integer"
        },
        "IsEditTimeSheetEntriesByHours": {
          "type": "boolean"
        },
        "TimeCardApprovalPeriodType": {
          "format": "int32",
          "type": "integer"
        },
        "IncludeMgrForMissingPunch": {
          "type": "boolean"
        },
        "IncludeMgrForExceptions": {
          "type": "boolean"
        },
        "MobTimeSheetHoursOnlyEnabled": {
          "type": "boolean"
        },
        "CurrencyFormatType": {
          "format": "int32",
          "type": "integer"
        },
        "TimeCardApprovalButtonEnabled": {
          "type": "boolean"
        },
        "TORCalendarHomeLLs": {
          "type": "string"
        },
        "MessagesEnabled": {
          "type": "boolean"
        },
        "DontShowAknowledgedExceptions": {
          "type": "boolean"
        },
        "ActionMatrixEntryEnabled": {
          "type": "boolean"
        },
        "ActionMatrixHasCopyFormat": {
          "type": "boolean"
        },
        "ActionMatrixEntryType": {
          "format": "int32",
          "type": "integer"
        },
        "ActionMatrixHasRegOTEntry": {
          "type": "boolean"
        },
        "ActionMatrixEntryLimitTypes": {
          "type": "boolean"
        },
        "TimeCardDefaultToHomeLL": {
          "type": "boolean"
        },
        "CustomTimeCardEnabled": {
          "type": "boolean"
        },
        "TimeGapRange": {
          "type": "string"
        },
        "MobileTimeSheetColumn1": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn2": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn3": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn4": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn5": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn6": {
          "format": "int32",
          "type": "integer"
        },
        "MobileTimeSheetColumn7": {
          "format": "int32",
          "type": "integer"
        },
        "MobileDisplayAllLLEnabled": {
          "type": "boolean"
        },
        "CustomTimeCardShowMealBreak": {
          "type": "boolean"
        },
        "UseHoursByDay": {
          "type": "boolean"
        },
        "ShowOnlyActiveLLScheduleTemp": {
          "type": "boolean"
        },
        "DefaultTimeCardToCurrentDate": {
          "type": "boolean"
        },
        "ViewAllEmpsOnTimeOffCalendar": {
          "type": "boolean"
        },
        "ViewEmpNamesOnTimeOffCalendar": {
          "type": "boolean"
        },
        "GroupShiftsByTransactionDate": {
          "type": "boolean"
        },
        "LimitPayAdjustmentTypes": {
          "type": "boolean"
        },
        "TimeCardInsertType": {
          "format": "int32",
          "type": "integer"
        },
        "LanguageID": {
          "type": "string"
        },
        "ClockOutNotesPromptEnabled": {
          "type": "boolean"
        },
        "ActionDefaultStartTimeType": {
          "format": "int32",
          "type": "integer"
        },
        "AllowNonTimesheetPunchEdit": {
          "type": "boolean"
        },
        "EmpNoteRequiredOnTimesheetEdit": {
          "type": "boolean"
        },
        "EmailMgrTimeSheetSubmitEnabled": {
          "type": "boolean"
        },
        "CollapseTimeCardLLsByDefault": {
          "type": "boolean"
        },
        "AllowEmployeesViewAvailability": {
          "type": "boolean"
        },
        "AllowEmployeesEditAvailability": {
          "type": "boolean"
        },
        "WarnUnapprovedTimecard": {
          "type": "boolean"
        },
        "UnapprovedTimeCardWarningMsg": {
          "type": "string"
        },
        "LimitAShiftADay": {
          "type": "boolean"
        },
        "DefaultTCApprovalsToAllEmp": {
          "type": "boolean"
        },
        "SendTimeSheetApprovalLink": {
          "type": "boolean"
        },
        "UnapprovedTimecardStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "ScheduleSwapEnabled": {
          "type": "boolean"
        },
        "ScheduleSwapDefaultFilterType": {
          "format": "int32",
          "type": "integer"
        },
        "ScheduleSwapEmployeesType": {
          "format": "int32",
          "type": "integer"
        },
        "SchSwpAutoAprveAddShiftEnb": {
          "type": "boolean"
        },
        "SchSwpAutoAprvePostShiftEnb": {
          "type": "boolean"
        },
        "DisableAdvScheduleAutoEmail": {
          "type": "boolean"
        },
        "SchSwpAutoAprveOTAddShiftEnble": {
          "type": "boolean"
        },
        "PunchPromptQuestionGrpID": {
          "format": "int32",
          "type": "integer"
        },
        "PunchPromptEnabled": {
          "type": "boolean"
        },
        "HideTORStartTime": {
          "type": "boolean"
        },
        "DoNotAllowTOROnHolidays": {
          "type": "boolean"
        },
        "LoadLastAccessedTabOnLogin": {
          "type": "boolean"
        },
        "DisplayedOrgUnit": {
          "format": "int32",
          "type": "integer"
        },
        "LLLabel": {
          "type": "string"
        },
        "LLsLabel": {
          "type": "string"
        },
        "EnableTimeSheetAutofillinFlex": {
          "type": "boolean"
        },
        "DefaultCalendarView": {
          "format": "int32",
          "type": "integer"
        },
        "RestrictAfterScheduleSecs": {
          "format": "int32",
          "type": "integer"
        },
        "EmpNoteRequiredOnPayAdjustmentEdit": {
          "type": "boolean"
        },
        "ActionItemTasksSortBy": {
          "format": "int32",
          "type": "integer"
        },
        "EmpGroupShiftsByTransactionDate": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusIn": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusAbsent": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusMeal": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusBreak": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusClockedOut": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownWorked": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownScheduled": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownUnplanned": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownTimeOff": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownOvertime": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownRegular": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphWorked": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphScheduled": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphUnplanned": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphTimeOff": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphOvertime": {
          "type": "boolean"
        },
        "FlexTimeAdminShowGraphRegular": {
          "type": "boolean"
        },
        "FlexTimeAdminShowDetailedBreakdownEarnings": {
          "type": "boolean"
        },
        "RestrictAddDeleteTimeSheetEntry": {
          "type": "boolean"
        },
        "EmpNoteRequiredForTOR": {
          "type": "boolean"
        },
        "FlexTimeShowLLCollapsed": {
          "type": "boolean"
        },
        "FlexTimeAdminShowStatusPercentages": {
          "type": "boolean"
        }
      }
    },
    "UpdateUserPreferencesModel": {
      "description": "A representation of UserPreferences as key value pairs",
      "type": "object",
      "properties": {}
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "description": "Authorization Token",
      "name": "Token",
      "in": "header"
    }
  },
  "security": [],
  "tags": [
    {
      "name": "CalendarIntegration",
      "description": "oData controller"
    },
    {
      "name": "CalendarAuthorization",
      "description": "api controller"
    },
    {
      "name": "CompTime",
      "description": "oData controller"
    },
    {
      "name": "EmployeeCalendar",
      "description": "oData controller"
    },
    {
      "name": "EmployeeCalendarDetail",
      "description": "oData controller"
    },
    {
      "name": "FATDetails",
      "description": "oData controller"
    },
    {
      "name": "FeatureAssignment",
      "description": "oData controller"
    },
    {
      "name": "Health",
      "description": "api controller"
    },
    {
      "name": "LaborLevel",
      "description": "oData controller"
    },
    {
      "name": "LaborLevelHierarchy",
      "description": "oData controller"
    },
    {
      "name": "PayAdjustment",
      "description": "oData controller"
    },
    {
      "name": "PayAdjustmentData",
      "description": "oData controller"
    },
    {
      "name": "PayrollPolicy",
      "description": "oData controller"
    },
    {
      "name": "PayType",
      "description": "oData controller"
    },
    {
      "name": "Punch",
      "description": "oData controller"
    },
    {
      "name": "PunchPrompt",
      "description": "oData controller"
    },
    {
      "name": "Schedule",
      "description": "oData controller"
    },
    {
      "name": "ScheduleDetail",
      "description": "oData controller"
    },
    {
      "name": "StatusBoard",
      "description": "oData controller"
    },
    {
      "name": "TimeCard",
      "description": "oData controller"
    },
    {
      "name": "TimeSheet",
      "description": "oData controller"
    },
    {
      "name": "Token",
      "description": "oData controller"
    },
    {
      "name": "UserInfo",
      "description": "oData controller"
    },
    {
      "name": "UserPreference",
      "description": "oData controller"
    },
    {
      "name": "Report",
      "description": "oData controller"
    },
    {
      "name": "MileageCalculator",
      "description": "oData controller"
    }
  ]
}
1